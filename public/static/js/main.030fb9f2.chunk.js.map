{"version":3,"sources":["NavBar.js","ErrorMessage.js","Welcome.js","GraphService.js","Calendar.js","BookingsCalendar.js","BookingsPage.js","App.js","App3.js","App2.js","serviceWorker.js","index.js","Config.js"],"names":["AuthNavItem","props","isAuthenticated","NavItem","NavLink","onClick","authButtonMethod","NavBar","this","user","calendarLink","to","className","Navbar","color","dark","expand","fixed","Container","NavbarBrand","href","Collapse","navbar","Nav","target","React","Component","ErrorMessage","des","Alert","msg","WelcomeContent","displayName","Button","Welcome","Jumbotron","graph","require","getAuthenticatedClient","accessToken","Client","init","authProvider","done","getCalenderEvents","a","client","api","select","orderby","get","events","getBookingsCalendarView","config","orgId","version","formatDateTime","dateTime","moment","utc","local","format","timeData","Calendar","state","window","msal","acquireTokenSilent","scopes","console","log","setState","value","showError","JSON","stringify","Table","scope","map","event","key","id","organizer","emailAddress","name","subject","start","end","BookingCalendar","bookingsEvents","date","Date","isPick","handleChange","tileDisabled","activeStartDate","view","getDay","storeEvents","bookingDateTime","forEach","item","push","Array","eventStartTime","month","getMonth","getDate","startTime","getTime","endTime","undefined","showEvents","filter","s","toLocaleTimeString","e","getFreeSlots2","freeSlots","setHours","timeLine","interval","i","length","setTime","timeSlotInterval","getFreeSlots","countHour","showFreeSlots","slot","getHours","getMinutes","tom","setDate","onChange","minDate","selfServiceAppointmentId","BookingsPage","chooseTimeHandler","alert","processMSTime","time","found","match","period","eachTimeFormat","num","slice","duration","intervalSec","parseInt","business","schedulingPolicy","pickableSlotTime","makeBook","fetch","method","headers","body","customerEmailAddress","customerName","customerNotes","customerPhone","timeZone","serviceId","serviceName","then","res","text","result","calendarView","service","path","render","App3","data","getData","json","parse","services","catch","mydata","mydata2","exact","index","Boolean","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","appId","access_token"],"mappings":"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","file":"static/js/main.030fb9f2.chunk.js","sourcesContent":["import React from \"react\";\nimport { NavLink as RouterNavLink } from \"react-router-dom\";\nimport {\n  Collapse,\n  Container,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n} from \"reactstrap\";\nimport \"@fortawesome/fontawesome-free/css/all.css\";\n\nfunction UserAvatar(props) {}\nfunction AuthNavItem(props) {\n  // If authenticated, return a dropdown with the user's info and a\n  // sign out button\n  if (props.isAuthenticated) {\n    return 1;\n  }\n  // Not authenticated, return a sign in link\n  else {\n    return (\n      <NavItem>\n        <NavLink onClick={props.authButtonMethod}>Sign In</NavLink>\n      </NavItem>\n    );\n  }\n}\nexport default class NavBar extends React.Component {\n  //  給下拉式選單用\n  //   state = {\n  //     isOpen: false,\n  //   };\n  //   toggle = () => {\n  //     this.setState({\n  //       isOpen: !this.state.isOpen,\n  //     });\n  //   };\n  render() {\n    let { isAuthenticated, authButtonMethod, user } = this.props;\n    let calendarLink = null;\n    if (isAuthenticated) {\n      calendarLink = (\n        <>\n          <NavItem>\n            <RouterNavLink to=\"/calendar\" className=\"nav-link\">\n              Calendar\n            </RouterNavLink>\n          </NavItem>\n          <NavItem>\n            <RouterNavLink to=\"/bookingsCalendar\" className=\"nav-link\">\n              Bookings Calendar\n            </RouterNavLink>\n          </NavItem>\n        </>\n      );\n    }\n    return (\n      <div>\n        {/* expand=\"md\"：橫列版的navbar，navbar的class要再加navbar-expand-xl|lg|md|sm。\n        跟之前提過的RWD一樣，會在這些螢幕寬度以上時做出橫列，小於的話就疊起來 */}\n        <Navbar color=\"dark\" dark expand=\"md\" fixed=\"top\">\n          <Container>\n            <NavbarBrand href=\"/\">React Graph Tutorial</NavbarBrand>\n            {/* <NavbarToggler onClick={this.toggle} /> 下拉式選單那種*/}\n            {/* Collapse 的 navbar：拓展開來會是navbar-collapse */}\n            {/* collapse navbar-collapse 合併使用時，螢幕寬度過小的話字 */}\n            {/* 不會擠在一起(垂直放也一樣)。也就是手機版三條線的圖示，按了會跳出導覽列。 */}\n            <Collapse navbar>\n              {/* Nav 的 navbar：拓展開來會是navbar-nav */}\n              <Nav className=\"mr-auto\" navbar>\n                <NavItem>\n                  <RouterNavLink to=\"/\" className=\"nav-link\">\n                    Home\n                  </RouterNavLink>\n                </NavItem>\n                {calendarLink}\n              </Nav>\n              <Nav navbar>\n                <NavItem>\n                  <NavLink\n                    href=\"https://developer.microsoft.com/graph/docs/concepts/overview\"\n                    target=\"_blank\"\n                  >\n                    <i className=\"fas fa-external-link-alt mr-1\" />\n                    Docs\n                  </NavLink>\n                </NavItem>\n                <AuthNavItem\n                  isAuthenticated={isAuthenticated}\n                  authButtonMethod={authButtonMethod}\n                  user={user}\n                />\n              </Nav>\n            </Collapse>\n          </Container>\n        </Navbar>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Alert } from \"reactstrap\";\n\nexport default class ErrorMessage extends React.Component {\n  render() {\n    let des = null;\n    if (this.props.des) {\n      des = (\n        <pre className=\"alert-pre border bg-light p-2\">\n          <code>{this.props.des}</code>\n        </pre>\n      );\n    }\n    return (\n      <Alert color=\"danger\">\n        <p className=\"mb-3\">{this.props.msg}</p>\n        {des}\n      </Alert>\n    );\n  }\n}\n","import React from \"react\";\nimport { Button, Jumbotron } from \"reactstrap\";\n\nfunction WelcomeContent(props) {\n  // If authenticated, greet the user\n  if (props.isAuthenticated) {\n    return (\n      <div>\n        <h4>Welcome {props.user.displayName}!</h4>\n        <p>Use the navigation bar at the top of the page to get started.</p>\n      </div>\n    );\n  }\n  // Not authenticated, present a sign in button\n  else {\n    return (\n      <Button color=\"primary\" onClick={props.authButtonMethod}>\n        Click here to sign in\n      </Button>\n    );\n  }\n}\n\nexport default class Welcome extends React.Component {\n  render() {\n    let { isAuthenticated, authButtonMethod, user } = this.props;\n    return (\n      <Jumbotron>\n        <h1>React Graph Tutorial</h1>\n        <p className=\"lead\">\n          This sample app shows how to use the Microsoft Graph API to access\n          Outlook and OneDrive data from React\n        </p>\n        <WelcomeContent\n          isAuthenticated={isAuthenticated}\n          authButtonMethod={authButtonMethod}\n          user={user}\n        />\n      </Jumbotron>\n    );\n  }\n}\n","import config from \"./Config\";\n\nvar graph = require(\"@microsoft/microsoft-graph-client\");\n\nfunction getAuthenticatedClient(accessToken) {\n  // Initialize Graph client\n  // Use the provided access token to authenticate requests\n  const client = graph.Client.init({\n    authProvider: done => {\n      done(null, accessToken.accessToken);\n    },\n  });\n  return client;\n}\n\nexport async function getCalenderEvents(accessToken) {\n  const client = getAuthenticatedClient(accessToken);\n  const events = await client\n    .api(\"/me/events\")\n    .select(\"subject,organizer,start,end\")\n    .orderby(\"start/dateTime DESC\")\n    .get();\n  return events;\n}\n\nexport async function listBookingService(accessToken) {\n  const client = getAuthenticatedClient(accessToken);\n  const events = await client\n    .api(\"/bookingBusinesses/\" + config.orgId + \"/services\")\n    .version(\"beta\")\n    .get();\n  return events;\n}\n\n// export async function getBookingService(accessToken) {\n//   const serviceId = listBookingService;\n//   console.log(serviceId);\n//   const client = getAuthenticatedClient(accessToken);\n//   const events = await client\n//     .api(\"/bookingBusinesses/\" + config.orgId + \"/services\")\n//     .version(\"beta\")\n//     .get();\n//   return events;\n// }\n\nexport async function getBookingsCalendarView(accessToken) {\n  const client = getAuthenticatedClient(accessToken);\n  const events = await client\n    .api(\"/bookingBusinesses/\" + config.orgId + \"/calendarView\")\n    .version(\"beta\")\n    .get();\n  return events;\n}\n\n// export async function publishBookings(accessToken) {\n//   const client = getAuthenticatedClient(accessToken);\n//   let res = await client\n//     .api(\"/bookingBusinesses/\" + config.orgId + \"/publish\")\n//     .version(\"beta\")\n//     .post();\n//   return res;\n// }\n","import React from \"react\";\nimport { Table } from \"reactstrap\";\nimport moment from \"moment\";\nimport config from \"./Config\";\nimport { getCalenderEvents } from \"./GraphService\";\n\n// Helper function to format Graph date/time\nfunction formatDateTime(dateTime) {\n  return moment\n    .utc(dateTime)\n    .local()\n    .format(\"D/M/YY h:mm A\");\n}\n\nexport default class Calendar extends React.Component {\n  state = {\n    events: [],\n  };\n\n  async componentDidMount() {\n    try {\n      // Get the user's access token\n      let accessToken = await window.msal.acquireTokenSilent({\n        scopes: config.scopes,\n      });\n      // Get the user's events\n      var events = await getCalenderEvents(accessToken);\n      console.log(events);\n      // Update the array of events in state\n      this.setState({ events: events.value });\n    } catch (err) {\n      this.props.showError(\"ERROR\", JSON.stringify(err));\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Calendar</h1>\n        <Table>\n          <thead>\n            <tr>\n              <th scope=\"col\">Organizer</th>\n              <th scope=\"col\">Subject</th>\n              <th scope=\"col\">Start</th>\n              <th scope=\"col\">End</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.events.map(function(event) {\n              return (\n                <tr key={event.id}>\n                  <td>{event.organizer.emailAddress.name}</td>\n                  <td>{event.subject}</td>\n                  <td>{formatDateTime(event.start.dateTime)}</td>\n                  <td>{formatDateTime(event.end.dateTime)}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Button } from \"reactstrap\";\nimport moment from \"moment\";\nimport config from \"./Config\";\nimport { getBookingsCalendarView, publishBookings } from \"./GraphService\";\n\nimport Calendar from \"react-calendar\";\n\n// Helper function to format Graph date/time\nfunction formatDateTime(dateTime) {\n  return moment\n    .utc(dateTime)\n    .local()\n    .format(\"hh:mm a\");\n}\n\nlet timeData;\n\nexport default class BookingCalendar extends React.Component {\n  state = {\n    bookingsEvents: [],\n    date: new Date(),\n    isPick: false,\n  };\n\n  handleChange = date => {\n    this.setState({\n      date,\n      isPick: true,\n    });\n  };\n\n  tileDisabled = ({ activeStartDate, date, view }) => {\n    return date.getDay() === 6 || date.getDay() === 0;\n  };\n\n  storeEvents = events => {\n    let bookingDateTime = [];\n    events.forEach(item => {\n      bookingDateTime.push({\n        start: item.start.dateTime,\n        end: item.end.dateTime,\n      });\n    });\n\n    timeData = new Array(12);\n    bookingDateTime.forEach(item => {\n      let eventStartTime = new Date(item.start);\n      const month = eventStartTime.getMonth();\n      const date = eventStartTime.getDate();\n      const startTime = eventStartTime.getTime();\n      const endTime = new Date(item.end).getTime();\n      if (timeData[month] === undefined) {\n        timeData[month] = [];\n      }\n      timeData[month].push({\n        date,\n        startTime,\n        endTime,\n      });\n    });\n  };\n\n  showEvents = (month, date) => {\n    if (timeData[month] === undefined) {\n      return <div> No appointment </div>;\n    } else {\n      let events = timeData[month].filter(item => {\n        return item.date === date;\n      });\n      let show = events.map(item => {\n        let s = new Date(item.startTime).toLocaleTimeString();\n        let e = new Date(item.endTime).toLocaleTimeString();\n        return <div key={item.startTime}> {s + \" - \" + e} </div>;\n      });\n      return show;\n    }\n  };\n\n  getFreeSlots2 = date => {\n    let freeSlots = [];\n    let start = new Date(date).setHours(8, 0, 0, 0);\n    let end = new Date(date).setHours(17, 0, 0, 0);\n    let timeLine = new Date(start); // checked timeline starts from start time\n    let timeSlotInterval = 1800;\n\n    let events = [];\n    if (timeData[date.getMonth()] !== undefined) {\n      events = timeData[date.getMonth()].filter(item => {\n        return item.date === date.getDate();\n      });\n    }\n    let i = 0; // count number for booked events\n    let interval;\n    // If timeline hasn't acheive end time, loop continue\n    while (timeLine.getTime() < end) {\n      // If there are unchecked events, enter into if condition\n      if (i !== events.length) {\n        interval = (events[i].startTime - timeLine) / 1000;\n        // If timeline hasn't acheive start time of a event\n        if (interval >= 3600) {\n          console.log(new Date(timeLine)); //顯示出來的可選時間\n          // increase timeline by the increment to show free slots\n          freeSlots.push(new Date(timeLine));\n          timeLine.setTime(timeLine.getTime() + timeSlotInterval * 1000);\n        } else if (0 < interval && interval < 3600) {\n          // Finally, let timeline = start time of a event\n          timeLine.setTime(events[i].startTime); //等於預約事件的起始時間\n        }\n        // If timeline is equal to start time of a event\n        else if (interval == 0) {\n          // jump over the event and timeline is equal to end time of a event\n          timeLine.setTime(timeLine.getTime() + 3600000); //跳過該預約事件時段\n          i++; //choose next event 選擇下一個預約事件\n        }\n      }\n      // If all events have been checked, enter into else condition\n      // calculate left time which can be booked\n      else {\n        interval = (end - timeLine) / 1000;\n        if (interval >= 3600) {\n          console.log(new Date(timeLine)); //顯示出來的可選時間\n          freeSlots.push(new Date(timeLine));\n          timeLine.setTime(timeLine.getTime() + timeSlotInterval * 1000);\n        } else if (0 < interval && interval < 3600) {\n          timeLine.setTime(end);\n        }\n      }\n    }\n    return freeSlots;\n  };\n\n  getFreeSlots = date => {\n    let freeSlots = [];\n    let start = new Date(date).setHours(8, 0, 0, 0);\n    let end = new Date(date).setHours(17, 0, 0, 0);\n    let timeLine = new Date(start);\n\n    let events = [];\n    if (timeData[date.getMonth()] !== undefined) {\n      events = timeData[date.getMonth()].filter(item => {\n        return item.date === date.getDate();\n      });\n    }\n    let i = 0;\n    let countHour = 0;\n    while (timeLine.getTime() < end) {\n      if (i !== events.length) {\n        if (timeLine.getTime() < events[i].startTime) {\n          let interval = (events[i].startTime - timeLine) / 1000;\n          countHour = interval / 3600;\n          if (countHour >= 1) {\n            for (let i = 1; i <= countHour; i++) {\n              console.log(new Date(timeLine)); //顯示出來的可選時間\n              freeSlots.push(new Date(timeLine));\n              timeLine.setTime(timeLine.getTime() + 3600000);\n            }\n          }\n          timeLine.setTime(events[i].startTime); //等於預約事件的起始時間\n        } else if (timeLine.getTime() == events[i].startTime) {\n          timeLine.setTime(timeLine.getTime() + 3600000); //跳過該預約事件時段\n          i++; //選擇下一個預約事件\n        }\n      } else {\n        let interval = (end - timeLine) / 1000;\n        countHour = interval / 3600;\n        if (countHour >= 1) {\n          for (let i = 1; i <= countHour; i++) {\n            console.log(new Date(timeLine)); //顯示出來的可選時間\n            freeSlots.push(new Date(timeLine));\n            timeLine.setTime(timeLine.getTime() + 3600000);\n          }\n        }\n        timeLine.setTime(end);\n      }\n    }\n    return freeSlots;\n  };\n\n  showFreeSlots = date => {\n    let freeSlots = this.getFreeSlots2(date);\n    return freeSlots.map(slot => (\n      <button\n        className=\"slot-btn\"\n        // outline\n        // color=\"primary\"\n        key={slot.getHours() + slot.getMinutes()}\n      >\n        {formatDateTime(slot)}\n      </button>\n    ));\n  };\n\n  async componentDidMount() {\n    try {\n      // Get the user's access token\n      let accessToken = await window.msal.acquireTokenSilent({\n        scopes: config.scopes,\n      });\n      // Get the user's events\n      var events = await getBookingsCalendarView(accessToken);\n      console.log(events);\n      // Update the array of events in state\n      this.setState({\n        bookingsEvents: events.value,\n      });\n      this.storeEvents(events.value);\n      console.log(events);\n    } catch (err) {\n      this.props.showError(\"ERROR\", JSON.stringify(err));\n    }\n  }\n\n  render() {\n    let { bookingsEvents, isPick, date } = this.state;\n    let tom = new Date();\n    tom.setDate(tom.getDate() + 1);\n    return (\n      <>\n        <div className=\"panel\">\n          <Calendar\n            onChange={this.handleChange}\n            // value={this.state.date}\n            minDate={tom}\n            tileDisabled={this.tileDisabled}\n          />\n          <div className=\"slots\">\n            <h2 className=\"myh2\"> Appointments </h2>\n            {isPick ? this.showEvents(date.getMonth(), date.getDate()) : null}\n            <h2 className=\"myh2\"> Free time slots </h2>\n            {isPick ? this.showFreeSlots(date) : null}\n          </div>\n        </div>\n        <pre>\n          {bookingsEvents.map(event => {\n            return (\n              <p key={event.selfServiceAppointmentId}>{event.start.dateTime}</p>\n            );\n          })}\n        </pre>\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { Container, Button } from \"reactstrap\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport Calendar from \"react-calendar\";\nimport moment from \"moment\";\n\nfunction formatDateTime(dateTime) {\n  return moment\n    .utc(dateTime)\n    .local()\n    .format(\"hh:mm a\");\n}\n\nlet timeData; // store booked time into month array\n\nclass BookingsPage extends React.Component {\n  state = {\n    date: new Date(),\n    isPick: false,\n  };\n  handleChange = date => {\n    this.setState({\n      date,\n      isPick: true,\n    });\n  };\n\n  tileDisabled = ({ activeStartDate, date, view }) => {\n    return date.getDay() === 6 || date.getDay() === 0;\n  };\n\n  // When component did mount, call storeEvents()\n  storeEvents = events => {\n    let bookingDateTime = []; // sets of booked time\n    events.forEach(item => {\n      bookingDateTime.push({\n        start: item.start.dateTime, // e.g. 2019-09-12T09:30:00+10:00\n        end: item.end.dateTime, // e.g. 2019-09-12T10:30:00+10:00\n      });\n    });\n\n    timeData = new Array(12);\n\n    // convert sets of booked time into month array structure\n    bookingDateTime.forEach(item => {\n      let eventStartTime = new Date(item.start);\n      const month = eventStartTime.getMonth();\n      const date = eventStartTime.getDate();\n      const startTime = eventStartTime.getTime();\n      const endTime = new Date(item.end).getTime();\n      if (timeData[month] === undefined) {\n        timeData[month] = [];\n      }\n      timeData[month].push({\n        date,\n        startTime,\n        endTime,\n      });\n    });\n    // e.g. timeData is\n    // [empty × 8, [{date: 12, startTime: 1568244600000, endTime: 1568248200000}], empty × 3]\n  };\n\n  // If user picks a date on panel, booked events of picked date show under \"Appointments\"\n  showEvents = (month, date) => {\n    if (timeData[month] === undefined) {\n      return <div> No appointment </div>;\n    } else {\n      let events = timeData[month].filter(item => {\n        return item.date === date;\n      });\n\n      // format date/time\n      let show = events.map(item => {\n        let s = formatDateTime(new Date(item.startTime));\n        let e = formatDateTime(new Date(item.endTime));\n        return <div key={item.startTime}> {s + \" - \" + e} </div>;\n      });\n      return show;\n    }\n  };\n\n  chooseTimeHandler = slot => {\n    alert(formatDateTime(slot));\n  };\n  // If user picks a date on panel, show free slots\n  showFreeSlots = date => {\n    let freeSlots = this.getFreeSlots(date);\n    return freeSlots.map(slot => (\n      <button\n        className=\"slot-btn\"\n        // outline\n        // color=\"primary\"\n        key={slot.getHours() + slot.getMinutes()}\n        onClick={() => this.chooseTimeHandler(slot)}\n      >\n        {formatDateTime(slot)}\n      </button>\n    ));\n    //return 0;\n  };\n\n  processMSTime = time => {\n    let re = /(\\d+[dhms]+)(\\d*[hms]*)(\\d*[ms]*)(\\d*[s]*)/i;\n    let found = time.match(re);\n    let period = {};\n    let eachTimeFormat = [];\n    for (let i = 1; i <= 4; i++) {\n      period = {};\n      if (found[i] !== \"\") {\n        period.num = found[i].slice(0, -1);\n        period.duration = found[i].slice(-1);\n        eachTimeFormat.push(period);\n      }\n    }\n    let intervalSec = 0;\n    let num;\n    for (let i = 0; i < eachTimeFormat.length; i++) {\n      num = parseInt(eachTimeFormat[i].num);\n      switch (eachTimeFormat[i].duration) {\n        case \"S\":\n          intervalSec += num;\n          break;\n        case \"M\":\n          intervalSec += num * 60;\n          break;\n        case \"H\":\n          intervalSec += num * 60 * 60;\n          break;\n        case \"D\":\n          intervalSec += num * 60 * 60 * 24;\n          break;\n        default:\n          console.log(\"no matching duration with\" + eachTimeFormat[i].duration);\n          break;\n      }\n    }\n    return intervalSec;\n  };\n\n  // check free slots by booked events of picked date\n  getFreeSlots = date => {\n    let freeSlots = [];\n    let start = new Date(date).setHours(8, 0, 0, 0);\n    let end = new Date(date).setHours(17, 0, 0, 0);\n    let timeLine = new Date(start); // checked timeline starts from start time\n\n    let timeSlotInterval = this.state.business.schedulingPolicy\n      .timeSlotInterval;\n    timeSlotInterval = this.processMSTime(timeSlotInterval);\n\n    let events = [];\n    if (timeData[date.getMonth()] !== undefined) {\n      events = timeData[date.getMonth()].filter(item => {\n        return item.date === date.getDate();\n      });\n    }\n    let i = 0; // count number for booked events\n    let interval;\n    let pickableSlotTime;\n    // If timeline hasn't acheive end time, loop continue\n    while (timeLine.getTime() < end) {\n      // If there are unchecked events, enter into if condition\n      if (i !== events.length) {\n        interval = (events[i].startTime - timeLine) / 1000;\n        // If timeline hasn't acheive start time of a event\n        while (interval > 0) {\n          if (interval < 3600) {\n            // interval is not enough for service period\n            timeLine.setTime(events[i].startTime);\n            interval = (events[i].startTime - timeLine) / 1000;\n            break;\n          }\n          freeSlots.push(new Date(timeLine));\n          pickableSlotTime = new Date(\n            timeLine.getTime() + timeSlotInterval * 1000\n          );\n          // compare \"service period\" and \"interval of pickable slot\"\n          // choose nearer one\n          if (pickableSlotTime < events[i].startTime) {\n            timeLine.setTime(pickableSlotTime);\n          } else {\n            timeLine.setTime(events[i].startTime);\n          }\n          interval = (events[i].startTime - timeLine) / 1000;\n        }\n\n        if (interval == 0) {\n          // If timeline is equal to start time of a event\n          // jump over the event and timeline is equal to end time of a event\n          timeLine.setTime(timeLine.getTime() + 3600000); //跳過該預約事件時段\n          i++; //choose next event 選擇下一個預約事件\n        }\n      } else {\n        // If all events have been checked, enter into else condition\n        // calculate left time which can be booked\n        interval = (end - timeLine) / 1000;\n        if (interval >= 3600) {\n          freeSlots.push(new Date(timeLine));\n          timeLine.setTime(timeLine.getTime() + timeSlotInterval * 1000);\n        } else if (0 < interval && interval < 3600) {\n          timeLine.setTime(end);\n        }\n      }\n    }\n    return freeSlots;\n  };\n\n  makeBook = () => {\n    fetch(\"http://localhost:5500/book/makeBook\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        \"@odata.type\": \"#microsoft.graph.bookingAppointment\",\n        customerEmailAddress: \"jenifers001d@gmail.com\",\n        customerName: \"Jordan Miller\",\n        customerNotes: \"Please be on time.\",\n        customerPhone: \"213-555-0199\",\n        end: {\n          \"@odata.type\": \"#microsoft.graph.dateTimeTimeZone\",\n          dateTime: \"2019-07-07T09:30:00+10:00\",\n          timeZone: \"Australia/Brisbane\",\n        },\n        serviceId: \"6fbd2880-9e81-4f0f-9d78-291d0ce9066f\",\n        serviceName: \"Initial consult\",\n        start: {\n          \"@odata.type\": \"#microsoft.graph.dateTimeTimeZone\",\n          dateTime: \"2019-07-07T08:30:00+10:00\",\n          timeZone: \"Australia/Brisbane\",\n        },\n      }),\n    })\n      .then(res => {\n        console.log(res);\n        return res.text();\n      })\n      .then(result => {\n        console.log(result);\n      });\n  };\n  componentDidMount() {\n    console.log(this.props.calendarView);\n    if (timeData === undefined) {\n      this.storeEvents(this.state.calendarView);\n    }\n  }\n\n  //  componentDidMount ? 因為我現在是DidMount後才拿到資料，所以用DidUpdate來改變 timeData\n  // 小心決定呼叫 storeEvents 的時間，不然會導致每次更新就儲存一次，產生 CPU 爆掉，不知名問題\n  componentDidUpdate() {\n    if (timeData === undefined) {\n      this.storeEvents(this.state.calendarView);\n    }\n  }\n\n  render() {\n    // let { calendarView, isPick, date, data } = this.state;\n    let { isPick, date } = this.state;\n    let { business, calendarView, service } = this.props;\n    let tom = new Date();\n    // let mydata = [],\n    //   mydata2 = [];\n    // if (data !== null) {\n    //   mydata.push(data.services);\n    //   mydata2.push(data.events);\n    //   //console.log(JSON.parse(mydata[0]).value);\n    // }\n\n    tom.setDate(tom.getDate() + 1); // set started date which I can pick on calendar panel\n    return (\n      <Router>\n        <Container>\n          <Route\n            path=\"/book\"\n            render={() => {\n              return (\n                <>\n                  {/*mydata.map((item, index) => {\n                    return (\n                      <ErrorMessage\n                        key={index}\n                        msg=\"Different services:\"\n                        des={item}\n                      />\n                    );\n                  })*/}\n                  {/*mydata2.map((item, index) => {\n                    return (\n                      <ErrorMessage\n                        key={index}\n                        msg=\"Calendar events:\"\n                        des={item}\n                      />\n                    );\n                  })*/}\n                </>\n              );\n            }}\n          />\n          <div>\n            <div className=\"panel\">\n              <Calendar\n                onChange={this.handleChange}\n                // value={this.state.date}\n                minDate={tom}\n                tileDisabled={this.tileDisabled}\n              />\n              <div className=\"slots\">\n                <h2 className=\"myh2\"> Appointments </h2>\n                {isPick\n                  ? this.showEvents(date.getMonth(), date.getDate())\n                  : null}\n                <h2 className=\"myh2\"> Free time slots </h2>\n                {isPick ? this.showFreeSlots(date) : null}\n              </div>\n            </div>\n            <pre>\n              {calendarView.map(event => {\n                return <p key={event.start.dateTime}>{event.start.dateTime}</p>;\n              })}\n            </pre>\n          </div>\n          <button onClick={this.makeBook}>Send book</button>\n        </Container>\n      </Router>\n    );\n  }\n}\n\nexport default BookingsPage;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { Container } from \"reactstrap\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport NavBar from \"./NavBar\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport Welcome from \"./Welcome\";\nimport Calendar from \"./Calendar\";\nimport BookingsCalendar from \"./BookingsCalendar\";\n\nimport config from \"./Config\";\nimport { UserAgentApplication } from \"msal\";\nimport { getCalenderEvents } from \"./GraphService\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.userAgentApplication = new UserAgentApplication({\n      auth: {\n        clientId: config.appId,\n      },\n      cache: {\n        cacheLocation: \"localStorage\",\n        storeAuthStateInCookie: true,\n      },\n    });\n\n    var user = this.userAgentApplication.getAccount();\n\n    this.state = {\n      isAuthenticated: user !== null,\n      user: {},\n      error: null,\n    };\n\n    if (user) {\n      console.log(user);\n      // Enhance user object with data from Graph\n      this.getUserProfile();\n    }\n  }\n\n  // This method calls the loginPopup function to do the login,\n  // then calls the getUserProfile function.\n  async login() {\n    try {\n      await this.userAgentApplication.loginPopup({\n        scopes: config.scopes,\n        prompt: \"select_account\",\n      });\n      await this.getUserProfile();\n    } catch (err) {\n      var errParts = err.split(\"|\");\n      this.setState({\n        isAuthenticated: false,\n        user: {},\n        error: { msg: errParts[1], des: errParts[0] },\n      });\n    }\n  }\n\n  logout = () => {\n    this.userAgentApplication.logout();\n  };\n\n  async getUserProfile() {\n    try {\n      // Get the access token silently\n      // If the cache contains a non-expired token, this function\n      // will just return the cached token. Otherwise, it will\n      // make a request to the Azure OAuth endpoint to get a token\n\n      let accessToken = await this.userAgentApplication.acquireTokenSilent({\n        scopes: config.scopes,\n      });\n\n      if (accessToken) {\n        // TEMPORARY: Display the token in the error flash\n        this.setState({\n          isAuthenticated: true,\n          error: { msg: \"Access token:\", des: accessToken.accessToken },\n        });\n      }\n    } catch (err) {\n      console.log(err);\n      var errParts = err.split(\"|\");\n      this.setState({\n        isAuthenticated: false,\n        user: {},\n        error: { message: errParts[1], debug: errParts[0] },\n      });\n    }\n  }\n\n  setErrorMsg = (msg, des) => {\n    this.setState({\n      error: { msg: msg, des: des },\n    });\n  };\n\n  render() {\n    let error = null;\n    if (this.state.error) {\n      error = (\n        <ErrorMessage msg={this.state.error.msg} des={this.state.error.des} />\n      );\n    }\n\n    return (\n      <Router>\n        <div>\n          <NavBar\n            isAuthenticated={this.state.isAuthenticated}\n            authButtonMethod={\n              this.state.isAuthenticated ? this.logout : this.login.bind(this)\n            }\n            user={this.state.user}\n          />\n          <Container>\n            {error}\n            <Route\n              exact\n              path=\"/\"\n              render={() => {\n                return (\n                  <Welcome\n                    isAuthenticated={this.state.isAuthenticated}\n                    authButtonMethod={this.login.bind(this)}\n                    user={this.state.user}\n                  />\n                );\n              }}\n            />\n            <Route\n              path=\"/calendar\"\n              render={() => {\n                return <Calendar showError={this.setErrorMsg} />;\n              }}\n            />\n            <Route\n              path=\"/bookingsCalendar\"\n              render={() => {\n                return <BookingsCalendar showError={this.setErrorMsg} />;\n              }}\n            />\n          </Container>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { NavLink as RouterNavLink } from \"react-router-dom\";\nimport { Container, Button } from \"reactstrap\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport Calendar from \"react-calendar\";\nimport moment from \"moment\";\n\n// Helper function to format Graph date/time\nfunction formatDateTime(dateTime) {\n  return moment\n    .utc(dateTime)\n    .local()\n    .format(\"hh:mm a\");\n}\n\nlet timeData; // store booked time into month array\n\nclass App3 extends React.Component {\n  state = {\n    data: null,\n    business: null,\n    calendarView: [],\n    service: null,\n    date: new Date(),\n    isPick: false,\n  };\n\n  handleChange = date => {\n    this.setState({\n      date,\n      isPick: true,\n    });\n  };\n\n  tileDisabled = ({ activeStartDate, date, view }) => {\n    return date.getDay() === 6 || date.getDay() === 0;\n  };\n\n  // When component did mount, call storeEvents()\n  storeEvents = events => {\n    let bookingDateTime = []; // sets of booked time\n    events.forEach(item => {\n      bookingDateTime.push({\n        start: item.start.dateTime, // e.g. 2019-09-12T09:30:00+10:00\n        end: item.end.dateTime, // e.g. 2019-09-12T10:30:00+10:00\n      });\n    });\n\n    timeData = new Array(12);\n\n    // convert sets of booked time into month array structure\n    bookingDateTime.forEach(item => {\n      let eventStartTime = new Date(item.start);\n      const month = eventStartTime.getMonth();\n      const date = eventStartTime.getDate();\n      const startTime = eventStartTime.getTime();\n      const endTime = new Date(item.end).getTime();\n      if (timeData[month] === undefined) {\n        timeData[month] = [];\n      }\n      timeData[month].push({\n        date,\n        startTime,\n        endTime,\n      });\n    });\n    // e.g. timeData is\n    // [empty × 8, [{date: 12, startTime: 1568244600000, endTime: 1568248200000}], empty × 3]\n  };\n\n  // If user picks a date on panel, booked events of picked date show under \"Appointments\"\n  showEvents = (month, date) => {\n    if (timeData[month] === undefined) {\n      return <div> No appointment </div>;\n    } else {\n      let events = timeData[month].filter(item => {\n        return item.date === date;\n      });\n\n      // format date/time\n      let show = events.map(item => {\n        let s = formatDateTime(new Date(item.startTime));\n        let e = formatDateTime(new Date(item.endTime));\n        return <div key={item.startTime}> {s + \" - \" + e} </div>;\n      });\n      return show;\n    }\n  };\n\n  chooseTimeHandler = slot => {\n    alert(formatDateTime(slot));\n  };\n  // If user picks a date on panel, show free slots\n  showFreeSlots = date => {\n    let freeSlots = this.getFreeSlots(date);\n    return freeSlots.map(slot => (\n      <button\n        className=\"slot-btn\"\n        // outline\n        // color=\"primary\"\n        key={slot.getHours() + slot.getMinutes()}\n        onClick={() => this.chooseTimeHandler(slot)}\n      >\n        {formatDateTime(slot)}\n      </button>\n    ));\n    //return 0;\n  };\n\n  processMSTime = time => {\n    let re = /(\\d+[dhms]+)(\\d*[hms]*)(\\d*[ms]*)(\\d*[s]*)/i;\n    let found = time.match(re);\n    let period = {};\n    let eachTimeFormat = [];\n    for (let i = 1; i <= 4; i++) {\n      period = {};\n      if (found[i] !== \"\") {\n        period.num = found[i].slice(0, -1);\n        period.duration = found[i].slice(-1);\n        eachTimeFormat.push(period);\n      }\n    }\n    let intervalSec = 0;\n    let num;\n    for (let i = 0; i < eachTimeFormat.length; i++) {\n      num = parseInt(eachTimeFormat[i].num);\n      switch (eachTimeFormat[i].duration) {\n        case \"S\":\n          intervalSec += num;\n          break;\n        case \"M\":\n          intervalSec += num * 60;\n          break;\n        case \"H\":\n          intervalSec += num * 60 * 60;\n          break;\n        case \"D\":\n          intervalSec += num * 60 * 60 * 24;\n          break;\n        default:\n          console.log(\"no matching duration with\" + eachTimeFormat[i].duration);\n          break;\n      }\n    }\n    return intervalSec;\n  };\n\n  // check free slots by booked events of picked date\n  getFreeSlots = date => {\n    let freeSlots = [];\n    let start = new Date(date).setHours(8, 0, 0, 0);\n    let end = new Date(date).setHours(17, 0, 0, 0);\n    let timeLine = new Date(start); // checked timeline starts from start time\n\n    let timeSlotInterval = this.state.business.schedulingPolicy\n      .timeSlotInterval;\n    timeSlotInterval = this.processMSTime(timeSlotInterval);\n\n    let events = [];\n    if (timeData[date.getMonth()] !== undefined) {\n      events = timeData[date.getMonth()].filter(item => {\n        return item.date === date.getDate();\n      });\n    }\n    let i = 0; // count number for booked events\n    let interval;\n    let pickableSlotTime;\n    // If timeline hasn't acheive end time, loop continue\n    while (timeLine.getTime() < end) {\n      // If there are unchecked events, enter into if condition\n      if (i !== events.length) {\n        interval = (events[i].startTime - timeLine) / 1000;\n        // If timeline hasn't acheive start time of a event\n        while (interval > 0) {\n          if (interval < 3600) {\n            // interval is not enough for service period\n            timeLine.setTime(events[i].startTime);\n            interval = (events[i].startTime - timeLine) / 1000;\n            break;\n          }\n          freeSlots.push(new Date(timeLine));\n          pickableSlotTime = new Date(\n            timeLine.getTime() + timeSlotInterval * 1000\n          );\n          // compare \"service period\" and \"interval of pickable slot\"\n          // choose nearer one\n          if (pickableSlotTime < events[i].startTime) {\n            timeLine.setTime(pickableSlotTime);\n          } else {\n            timeLine.setTime(events[i].startTime);\n          }\n          interval = (events[i].startTime - timeLine) / 1000;\n        }\n\n        if (interval == 0) {\n          // If timeline is equal to start time of a event\n          // jump over the event and timeline is equal to end time of a event\n          timeLine.setTime(timeLine.getTime() + 3600000); //跳過該預約事件時段\n          i++; //choose next event 選擇下一個預約事件\n        }\n      } else {\n        // If all events have been checked, enter into else condition\n        // calculate left time which can be booked\n        interval = (end - timeLine) / 1000;\n        if (interval >= 3600) {\n          freeSlots.push(new Date(timeLine));\n          timeLine.setTime(timeLine.getTime() + timeSlotInterval * 1000);\n        } else if (0 < interval && interval < 3600) {\n          timeLine.setTime(end);\n        }\n      }\n    }\n    return freeSlots;\n  };\n\n  // Click \"Customer Go To Book\" and then fetch data\n  getData = () => {\n    //fetch(\"http://localhost:5500/book\")\n    fetch(\"/book\")\n      .then(data => data.json())\n      .then(result => {\n        this.setState({\n          data: result,\n          business: JSON.parse(result.business),\n          calendarView: JSON.parse(result.events),\n          service: JSON.parse(result.services).value,\n        });\n      })\n      .catch(e => console.log(\"錯誤:\", e));\n  };\n  makeBook = () => {\n    //fetch(\"http://localhost:5500/book/makeBook\", {\n    fetch(\"/book/makeBook\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        \"@odata.type\": \"#microsoft.graph.bookingAppointment\",\n        customerEmailAddress: \"jenifers001d@gmail.com\",\n        customerName: \"Jordan Miller\",\n        customerNotes: \"Please be on time.\",\n        customerPhone: \"213-555-0199\",\n        end: {\n          \"@odata.type\": \"#microsoft.graph.dateTimeTimeZone\",\n          dateTime: \"2019-09-10T09:30:00+10:00\",\n          timeZone: \"Australia/Brisbane\",\n        },\n        serviceId: \"6fbd2880-9e81-4f0f-9d78-291d0ce9066f\",\n        serviceName: \"Initial consult\",\n        start: {\n          \"@odata.type\": \"#microsoft.graph.dateTimeTimeZone\",\n          dateTime: \"2019-09-10T08:30:00+10:00\",\n          timeZone: \"Australia/Brisbane\",\n        },\n      }),\n    })\n      .then(res => {\n        console.log(res);\n        return res.text();\n      })\n      .then(result => {\n        console.log(result);\n      });\n  };\n\n  //  componentDidMount ? 因為我現在是DidMount後才拿到資料，所以用DidUpdate來改變 timeData\n  // 小心決定呼叫 storeEvents 的時間，不然會導致每次更新就儲存一次，產生 CPU 爆掉，不知名問題\n  componentDidUpdate() {\n    if (timeData === undefined) {\n      this.storeEvents(this.state.calendarView);\n    }\n  }\n\n  render() {\n    let { calendarView, isPick, date, data } = this.state;\n    let tom = new Date();\n    let mydata = [],\n      mydata2 = [];\n    if (data !== null) {\n      mydata.push(data.services);\n      mydata2.push(data.events);\n      //console.log(JSON.parse(mydata[0]).value);\n    }\n\n    tom.setDate(tom.getDate() + 1); // set started date which I can pick on calendar panel\n\n    return (\n      <Router>\n        <Container>\n          <RouterNavLink to=\"/book\" className=\"nav-link\">\n            <Button color=\"primary\" onClick={this.getData}>\n              Customer Go To Book\n            </Button>\n          </RouterNavLink>\n\n          <Route\n            exact\n            path=\"/book\"\n            render={() => {\n              return (\n                <>\n                  {mydata.map((item, index) => {\n                    return (\n                      <ErrorMessage\n                        key={index}\n                        msg=\"Different services:\"\n                        des={item}\n                      />\n                    );\n                  })}\n                  {mydata2.map((item, index) => {\n                    return (\n                      <ErrorMessage\n                        key={index}\n                        msg=\"Calendar events:\"\n                        des={item}\n                      />\n                    );\n                  })}\n                  <div>\n                    <div className=\"panel\">\n                      <Calendar\n                        onChange={this.handleChange}\n                        // value={this.state.date}\n                        minDate={tom}\n                        tileDisabled={this.tileDisabled}\n                      />\n                      <div className=\"slots\">\n                        <h2 className=\"myh2\"> Appointments </h2>\n                        {isPick\n                          ? this.showEvents(date.getMonth(), date.getDate())\n                          : null}\n                        <h2 className=\"myh2\"> Free time slots </h2>\n                        {isPick ? this.showFreeSlots(date) : null}\n                      </div>\n                    </div>\n                    <pre>\n                      {calendarView.map(event => {\n                        return (\n                          <p key={event.start.dateTime}>\n                            {event.start.dateTime}\n                          </p>\n                        );\n                      })}\n                    </pre>\n                  </div>\n                  <button onClick={this.makeBook}>Send book</button>\n                </>\n              );\n            }}\n          />\n        </Container>\n      </Router>\n    );\n  }\n}\n\nexport default App3;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { NavLink as RouterNavLink } from \"react-router-dom\";\nimport { Container, Button } from \"reactstrap\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport BookingsPage from \"./BookingsPage\";\nimport moment from \"moment\";\n\n// Helper function to format Graph date/time\nfunction formatDateTime(dateTime) {\n  return moment\n    .utc(dateTime)\n    .local()\n    .format(\"hh:mm a\");\n}\n\nlet timeData; // store booked time into month array\n\nclass App2 extends React.Component {\n  state = {\n    data: null,\n    business: null,\n    calendarView: [],\n    service: null,\n  };\n\n  // Click \"Customer Go To Book\" and then fetch data\n  // getData = () => {\n  //   fetch(\"http://localhost:5500/book\")\n  //     .then(data => data.json())\n  //     .then(result => {\n  //       this.setState({\n  //         data: result,\n  //         business: JSON.parse(result.business),\n  //         calendarView: JSON.parse(result.events),\n  //         service: JSON.parse(result.services).value,\n  //       });\n  //     })\n  //     .catch(e => console.log(\"錯誤:\", e));\n  // };\n  componentWillMount() {\n    fetch(\"http://localhost:5500/book\")\n      .then(data => data.json())\n      .then(result => {\n        this.setState({\n          data: result,\n          business: JSON.parse(result.business),\n          calendarView: JSON.parse(result.events),\n          service: JSON.parse(result.services).value,\n        });\n      })\n      .catch(e => console.log(\"錯誤:\", e));\n  }\n\n  render() {\n    //let { calendarView, isPick, date, data } = this.state;\n    let { business, calendarView, service } = this.state;\n    // let tom = new Date();\n    // let mydata = [],\n    //   mydata2 = [];\n    // if (data !== null) {\n    //   mydata.push(data.services);\n    //   mydata2.push(data.events);\n    //   //console.log(JSON.parse(mydata[0]).value);\n    // }\n\n    //tom.setDate(tom.getDate() + 1); // set started date which I can pick on calendar panel\n\n    return (\n      <Router>\n        <Container>\n          <Route\n            exact\n            path=\"/\"\n            render={() => {\n              return (\n                <RouterNavLink to=\"/book\" className=\"nav-link\">\n                  <Button color=\"primary\">Customer Go To Book</Button>\n                </RouterNavLink>\n              );\n            }}\n          />\n          <Route\n            exact\n            path=\"/book\"\n            render={() => {\n              return (\n                <BookingsPage\n                  business={business}\n                  calendarView={calendarView}\n                  service={service}\n                />\n              );\n            }}\n          />\n        </Container>\n      </Router>\n    );\n  }\n}\n\nexport default App2;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport App2 from \"./App2\";\nimport App3 from \"./App3\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( < App3 / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();","module.exports = {\n    appId: 'eda2c3ab-8fdc-43e3-a9b0-47aa5cc299f3',\n    orgId: \"testOrganization@testReactCalendar.onmicrosoft.com\",\n    scopes: [\n        \"user.read\",\n        \"calendars.read\",\n        \"Bookings.Read.All\",\n        \"Bookings.ReadWrite.All\",\n        \"Bookings.Manage.All\",\n        \"BookingsAppointment.ReadWrite.All\"\n    ],\n    access_token: \"eyJ0eXAiOiJKV1QiLCJub25jZSI6IlltbnYtcmozMVZERDYtN1V5N2V1bEJPQXhMNklYdE81Ty10R0pDX1FXdWMiLCJhbGciOiJSUzI1NiIsIng1dCI6ImllX3FXQ1hoWHh0MXpJRXN1NGM3YWNRVkduNCIsImtpZCI6ImllX3FXQ1hoWHh0MXpJRXN1NGM3YWNRVkduNCJ9.eyJhdWQiOiJodHRwczovL2dyYXBoLm1pY3Jvc29mdC5jb20iLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC80MGQxODlmNy03ZWUzLTQ2YWQtYmY0OS01ZTA1MjRjNGM0ZjQvIiwiaWF0IjoxNTY2ODc4NTEzLCJuYmYiOjE1NjY4Nzg1MTMsImV4cCI6MTU2Njg4MjQxMywiYWlvIjoiNDJGZ1lQaFg1Y3F5cmZCMjBMVVBnalkzV1FJWEFnQT0iLCJhcHBfZGlzcGxheW5hbWUiOiJDYWxlbmRhclRlc3RBcHAiLCJhcHBpZCI6ImQxNzU0YWE5LTgyN2YtNDQzMy1hNDRjLThmYTEwZjNiZWEzZCIsImFwcGlkYWNyIjoiMSIsImlkcCI6Imh0dHBzOi8vc3RzLndpbmRvd3MubmV0LzQwZDE4OWY3LTdlZTMtNDZhZC1iZjQ5LTVlMDUyNGM0YzRmNC8iLCJvaWQiOiI3ODk5NzQzZC04ZGI5LTRhMzMtODBhYS1kZmQ5ODRjNDcwMDkiLCJyb2xlcyI6WyJDYWxlbmRhcnMuUmVhZCJdLCJzdWIiOiI3ODk5NzQzZC04ZGI5LTRhMzMtODBhYS1kZmQ5ODRjNDcwMDkiLCJ0aWQiOiI0MGQxODlmNy03ZWUzLTQ2YWQtYmY0OS01ZTA1MjRjNGM0ZjQiLCJ1dGkiOiJDZjZuU09GVk0wQ0hLazdhQjFZU0FBIiwidmVyIjoiMS4wIiwieG1zX3RjZHQiOjE1NjU3ODEzOTZ9.Uk5G57Svqw6QT2CxWTKtTJp5ONR6v3gnl3u_r0N0nrDR084pcibrlpsyZcAdK9LQnnlLDKhqg3jBYPF3tDpkBg3nF6DhWZ-BCuPfKoeBbfU1TYmql6kozyB5C-RKmt-chO-ZSa_neLpNZYYZOrWs88b5ALTjliz-hWt3I-4gC_VAwZBPPBEeqmomPNdfF9VM-wkYIHC8_pjXTcBeOv9zvDC5-FceVKXEJCtQxmS8K1LFVEObvhiCZYnLOiB95GEqGrEozaJdM4wi53t3vsjmURIkQahd5aLDVJRI-FOm-5bv8HIsKCPsoGGzMU3ZdT8PjCjbqdG4NYn8EPJcsFs-Zg\"\n};"],"sourceRoot":""}