{"version":3,"sources":["NavBar.js","InfoForm.js","ScheduleHeader.js","SlotCell.js","ScheduleWeekdays.js","Schedule.js","App2.js","serviceWorker.js","index.js"],"names":["NavBar","url","this","props","Navbar","color","dark","expand","fixed","Container","NavbarBrand","href","Nav","navbar","NavItem","showRegister","NavLink","target","React","Component","InfoWrapper","styled","div","InfoHeader","h2","InfoContent","InfoLeft","InfoRight","InfoForm","state","userName","userEmail","inputName","e","setState","value","getUserInfo","inputEmail","emailContent","match","FormGroup","Input","type","name","id","placeholder","onChange","Label","for","rows","HeaderOuter","WeekNav","ScheduleHeader","current","startOfWeek","moment","startOf","endOfWeek","endOf","datePeriod","format","onClick","prevWeek","nextWeek","Cell","SlotCell","time","isPicked","isHovered","checkAfterToday","now","Date","dayAfterToday","diff","noWorkDay","days","handleMouseEnter","handleMouseLeave","isBusy","tempBookTime","chooseBusyDay","classes","tempStartTime","tempEndTime","handleChooseBusyDay","className","onMouseDown","handleMouseDown","onMouseEnter","onMouseLeave","DayWrapper","WeekTitleCell","DateOfWeek","RowCells","SlotWrapper","TimeCell","ScheduleWeekdays","mouseIsDown","isFree","getDate","alert","handleMouseOver","handleMouseUp","busyDay","renderCells","day","dateEvents","startOfHour","hour","minute","second","millisecond","endOfHour","slots","i","length","afterStart","start","beforeEnd","end","push","key","add","curPosition","events","startDay","weekdays","forEach","event","date","onMouseOver","onMouseUp","map","item","ScheduleWrapper","NoonLine","hr","bookingDateTime","Schedule","currentMonth","eventsArr","storeEvents","dateTime","processMSTime","found","period","eachTimeFormat","num","slice","duration","intervalSec","parseInt","console","log","subtract","getSelectedDate","SentButton","Button","SpinnerWrapper","StyledSpinner","Spinner","NoAccessTokenMsg","App2","business","calendarEvents","services","regisURL","selectedDate","userInfo","isLoad","getURLandBookingsData","fetch","then","data","text","urlResult","json","bookingsResults","sentData","method","headers","body","JSON","stringify","customerEmailAddress","customerName","customerNotes","customerPhone","timeZone","serviceId","serviceName","res","window","location","reload","loadingClasses","mainClasses","noAccessTokenRecord","exact","path","render","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5ca076b7.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Container,\n  Navbar,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n} from \"reactstrap\";\n\nexport default class NavBar extends React.Component {\n  render() {\n    const url = this.props.url;\n    return (\n      <div>\n        {/* expand=\"md\"：橫列版的navbar，navbar的class要再加navbar-expand-xl|lg|md|sm。\n        跟之前提過的RWD一樣，會在這些螢幕寬度以上時做出橫列，小於的話就疊起來 */}\n        <Navbar color=\"dark\" dark expand=\"md\" fixed=\"top\">\n          <Container>\n            <NavbarBrand href=\"/\">BOOKING WEB APP</NavbarBrand>\n            <Nav navbar>\n              <NavItem>\n                {this.props.showRegister ? (\n                  <NavLink href={url} target=\"_blank\">\n                    Register\n                  </NavLink>\n                ) : null}\n              </NavItem>\n            </Nav>\n          </Container>\n        </Navbar>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { FormGroup, Label, Input } from \"reactstrap\";\n\nconst InfoWrapper = styled.div`\n  margin: 10px auto;\n`;\nconst InfoHeader = styled.h2`\n  text-align: center;\n`;\nconst InfoContent = styled.div`\n  display: flex;\n`;\nconst InfoLeft = styled.div`\n  flex-grow: 1;\n  margin: 10px 10px 0px;\n`;\nconst InfoRight = styled.div`\n  flex-grow: 1;\n  margin: 15px 10px 0px;\n`;\nclass InfoForm extends React.Component {\n  state = {\n    userName: null,\n    userEmail: null,\n  };\n  inputName = e => {\n    this.setState(\n      {\n        userName: e.target.value,\n      },\n      () => {\n        this.props.getUserInfo(this.state);\n      }\n    );\n  };\n  inputEmail = e => {\n    let re = /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/i;\n    let emailContent = \"\";\n    if (e.target.value) {\n      let isMatch = e.target.value.match(re);\n      if (isMatch !== null) {\n        emailContent = e.target.value;\n      } else {\n        emailContent = \"NotRightFormat\";\n      }\n    }\n    this.setState(\n      {\n        userEmail: emailContent,\n      },\n      () => {\n        this.props.getUserInfo(this.state);\n      }\n    );\n  };\n  render() {\n    return (\n      <InfoWrapper>\n        <InfoHeader>Information</InfoHeader>\n        <InfoContent>\n          <InfoLeft>\n            <FormGroup>\n              <Input\n                type=\"text\"\n                name=\"userName\"\n                id=\"userName\"\n                placeholder=\"Name (Required)\"\n                onChange={this.inputName}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Input\n                type=\"email\"\n                name=\"email\"\n                id=\"email\"\n                placeholder=\"Email (Required)\"\n                onChange={this.inputEmail}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"select\">Select Service</Label>\n              <Input type=\"select\" name=\"select\" id=\"select\">\n                <option>IFN502 Student Consultation</option>\n                <option>IFN660 Student Consultation</option>\n                <option>IFN647 Student Consultation</option>\n                <option>Project meeting</option>\n              </Input>\n            </FormGroup>\n          </InfoLeft>\n          <InfoRight>\n            <FormGroup>\n              <Label for=\"exampleText\">\n                Please let me know if you have any special requests.\n              </Label>\n              <Input type=\"textarea\" name=\"text\" id=\"exampleText\" rows=\"5\" />\n            </FormGroup>\n          </InfoRight>\n        </InfoContent>\n      </InfoWrapper>\n    );\n  }\n}\n\nexport default InfoForm;\n","import React from \"react\";\nimport moment from \"moment\";\nimport styled from \"styled-components\";\n\nconst HeaderOuter = styled.div`\n  border-top-right-radius: 10px;\n  border-top-left-radius: 10px;\n  background-color: #89c8ff;\n  padding: 5px;\n  display: flex;\n  justify-content: space-between;\n  line-height: 33px;\n`;\nconst WeekNav = styled.div`\n  width: 35px;\n  height: 35px;\n  text-align: center;\n  line-height: 33px;\n  :hover {\n    border-radius: 50%;\n    background-color: #0088ff;\n    color: white;\n  }\n`;\n\nfunction ScheduleHeader(props) {\n  const current = props.current;\n  const headerMonthFormat = \"MMM YYYY\";\n  const startOfWeek = moment(current).startOf(\"week\");\n  const endOfWeek = moment(current).endOf(\"week\");\n  const datePeriod =\n    moment(startOfWeek).format(\"D\") + \"-\" + moment(endOfWeek).format(\"D\");\n  return (\n    <HeaderOuter>\n      <WeekNav onClick={() => props.prevWeek(current)}> {\"<\"} </WeekNav>\n      <div>{datePeriod + \" \" + moment(current).format(headerMonthFormat)}</div>\n      <WeekNav onClick={() => props.nextWeek(current)}> {\">\"} </WeekNav>\n    </HeaderOuter>\n  );\n}\n\nexport default ScheduleHeader;\n","import React from \"react\";\nimport moment from \"moment\";\nimport styled from \"styled-components\";\n\nconst Cell = styled.div`\n  border: 1px dashed rgb(228, 228, 228);\n  width: 100%;\n  height: 25px;\n  text-align: center;\n  line-height: 26px;\n  margin: 1px 0px;\n  transition: all 0.05s ease-in-out;\n`;\nclass SlotCell extends React.Component {\n  state = {\n    time: this.props.time,\n    isPicked: null,\n    isHovered: false,\n  };\n  checkAfterToday = () => {\n    const { time } = this.state;\n    // 這邊很奇怪，半夜要再試一次\n    const now = moment(new Date()).startOf(\"day\");\n    // 加了 start of day 後就沒問題了，確保 now 從 00:00 開始才會是大於等於一天\n    const dayAfterToday = time.diff(now, \"days\");\n    const noWorkDay = time.days();\n    if (dayAfterToday > 0 && noWorkDay !== 0 && noWorkDay !== 6) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  handleMouseEnter = e => {\n    e.target.value = this.state.time;\n    this.setState({\n      isHovered: true,\n    });\n  };\n\n  handleMouseLeave = e => {\n    this.setState({\n      isHovered: false,\n    });\n  };\n\n  render() {\n    const { time, isHovered } = this.state;\n    const { isBusy, tempBookTime } = this.props;\n    let chooseBusyDay = false;\n    let classes = \"\";\n    if (this.checkAfterToday() && isBusy) {\n      classes = \"busy\";\n    } else if (this.checkAfterToday() && isBusy === false) {\n      classes = \"mouse-on\";\n    }\n    // if time is between selecting appointment period, change classes to show green\n    if (\n      this.checkAfterToday() &&\n      tempBookTime.tempStartTime <= time &&\n      time < tempBookTime.tempEndTime\n    ) {\n      if (!isBusy) {\n        classes += \" selecting\";\n      } else {\n        chooseBusyDay = true;\n        this.props.handleChooseBusyDay(chooseBusyDay);\n      }\n    }\n    return (\n      <Cell\n        className={classes}\n        value={time}\n        onMouseDown={e =>\n          this.props.handleMouseDown(e, this.checkAfterToday(), !isBusy)\n        }\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      >\n        {\" \"}\n        {isHovered ? moment(time).format(\"hh:mm A\") : \"\"}{\" \"}\n      </Cell>\n    );\n  }\n}\n\nexport default SlotCell;\n","import React from \"react\";\nimport moment from \"moment\";\nimport styled from \"styled-components\";\nimport SlotCell from \"./SlotCell\";\n\nconst DayWrapper = styled.div`\n  width: 100%;\n  margin: 0px 2.5px;\n`;\nconst WeekTitleCell = styled.div`\n  margin: 5px 10px;\n  width: 14.2%;\n  height: 45px;\n  line-height: 23px;\n`;\nconst DateOfWeek = styled.div`\n  font-size: 20px;\n`;\nconst RowCells = styled.div`\n  padding: 5px 20px;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n`;\nconst SlotWrapper = styled.div``;\nconst TimeCell = styled.div`\n  border: 1px dashed rgb(228, 228, 228);\n  width: 100%;\n  height: 51px;\n  text-align: center;\n  line-height: 26px;\n  margin: 1px 0px;\n`;\n\nconst time = [\n  \"8:00\",\n  \"9:00\",\n  \"10:00\",\n  \"11:00\",\n  \"12:00\",\n  \"13:00\",\n  \"14:00\",\n  \"15:00\",\n  \"16:00\",\n];\n\nclass ScheduleWeekdays extends React.Component {\n  state = {\n    tempBookTime: {\n      tempStartTime: null,\n      tempEndTime: null,\n    },\n    mouseIsDown: false,\n  };\n  handleMouseDown = (e, dayAfterToday, isFree) => {\n    const duration = 30 * 60 * 1000;\n    if (dayAfterToday && isFree) {\n      this.setState(\n        {\n          tempBookTime: {\n            tempStartTime: e.target.value,\n            tempEndTime: moment(e.target.value + duration),\n          },\n          mouseIsDown: true,\n        },\n        () => {\n          this.props.getDate(this.state.tempBookTime); // send selected time back to App2.js\n        }\n      );\n    } else {\n      alert(\"Please choose another day.\");\n    }\n  };\n  handleMouseOver = e => {\n    // when mouse is down, this method can start to work\n    let { tempBookTime } = this.state;\n    const duration = 30 * 60 * 1000;\n    this.setState(\n      {\n        tempBookTime: {\n          tempStartTime: tempBookTime.tempStartTime,\n          tempEndTime: moment(e.target.value + duration),\n        },\n      },\n      () => {\n        this.props.getDate(this.state.tempBookTime); // send selected time back to App2.js\n      }\n    );\n  };\n  handleMouseUp = () => {\n    this.setState({\n      mouseIsDown: false,\n    });\n  };\n  handleChooseBusyDay = busyDay => {\n    let { tempBookTime } = this.state;\n    const duration = 30 * 60 * 1000;\n    if (busyDay) {\n      this.setState(\n        {\n          tempBookTime: {\n            tempStartTime: tempBookTime.tempStartTime,\n            tempEndTime: moment(tempBookTime.tempStartTime + duration),\n          },\n          mouseIsDown: false,\n        },\n        () => {\n          this.props.getDate(this.state.tempBookTime); // send selected time back to App2.js\n        }\n      );\n    }\n  };\n\n  renderCells = (day, dateEvents) => {\n    const slotInterval = 30;\n    const startOfHour = moment(day) // start time of a day\n      .hour(8)\n      .minute(0)\n      .second(0)\n      .millisecond(0);\n    const endOfHour = moment(day) // end time of a day\n      .hour(17)\n      .minute(0)\n      .second(0)\n      .millisecond(0);\n\n    let slots = [];\n    let hour = startOfHour;\n    let i = 0;\n    let isBusy;\n    while (hour < endOfHour) {\n      isBusy = false;\n      // if there is appointments which haven't been shown on schedule\n      if (i < dateEvents.length) {\n        let afterStart = dateEvents[i].start.diff(hour, \"minutes\") <= 0;\n        let beforeEnd = dateEvents[i].end.diff(hour, \"minutes\") > 0;\n        // if time is between busy appointment period, flag it is busy\n        if (afterStart && beforeEnd) {\n          isBusy = true; // isBusy will be passed into <SlotCell>\n        }\n        // if time is equal to end of appointment, jump to next appointment\n        if (dateEvents[i].end.diff(hour, \"minutes\") === 0) {\n          i++;\n        }\n      }\n\n      slots.push(\n        <SlotCell\n          key={hour}\n          time={hour}\n          isBusy={isBusy}\n          // tempBookTime is passed into for processing selecting css (green)\n          tempBookTime={this.state.tempBookTime}\n          handleMouseDown={this.handleMouseDown}\n          handleChooseBusyDay={this.handleChooseBusyDay}\n        ></SlotCell>\n      );\n      hour = moment(hour).add(slotInterval, \"m\");\n    }\n    return <SlotWrapper>{slots}</SlotWrapper>;\n  };\n\n  render() {\n    const { current, events } = this.props;\n    const { mouseIsDown } = this.state;\n    const weekdaysFormat = \"ddd\";\n    const weekdatesFormat = \"D\";\n    const startDay = moment(current).day(0); // The start day of this week(e.g. Sun 15)\n    let weekdays = [];\n    let day, classes, curPosition, diff;\n    // A week is 7 days, produce each column and slots from Sun, Mon to Sat\n    for (let i = 0; i < 7; i++) {\n      // add day by day to the start day of this week\n      day = moment(startDay).add(i, \"d\");\n\n      // set days before today to gray color, and today to peach color\n      classes = \"\";\n      curPosition = moment(day);\n      diff = curPosition.diff(new Date(), \"hours\");\n      if (diff < 0) {\n        classes = \"before\";\n      } else if (diff === 0) {\n        classes = \"today\";\n      }\n      //console.log(curPosition.days());\n      if (curPosition.days() === 0 || curPosition.days() === 6) {\n        classes += \" no-work-day\";\n      }\n\n      // check if there is appointments at curPosition \"that\" day.\n      let dateEvents = [];\n      events.forEach(event => {\n        if (curPosition.date() === moment(event.start).date()) {\n          dateEvents.push({\n            start: moment(event.start),\n            end: moment(event.end),\n          });\n        }\n      });\n      // if there is, pass appointments of that day into renderCells() as below\n      weekdays.push(\n        <DayWrapper\n          key={i}\n          className={classes}\n          onMouseOver={mouseIsDown ? this.handleMouseOver : null}\n          onMouseUp={this.handleMouseUp}\n        >\n          <WeekTitleCell>\n            <div>{moment(day).format(weekdaysFormat)}</div>\n            <DateOfWeek>{moment(day).format(weekdatesFormat)}</DateOfWeek>\n          </WeekTitleCell>\n          {this.renderCells(day, dateEvents)}\n        </DayWrapper>\n      );\n    }\n    return (\n      <RowCells>\n        <DayWrapper>\n          <WeekTitleCell></WeekTitleCell>\n          <SlotWrapper>\n            {time.map(item => (\n              <TimeCell key={item}>{item}</TimeCell>\n            ))}\n          </SlotWrapper>\n        </DayWrapper>\n        {weekdays}\n      </RowCells>\n    );\n  }\n}\n\nexport default ScheduleWeekdays;\n","import React from \"react\";\nimport moment from \"moment\";\nimport styled from \"styled-components\";\nimport ScheduleHeader from \"./ScheduleHeader\";\nimport ScheduleWeekdays from \"./ScheduleWeekdays\";\n\nconst ScheduleWrapper = styled.div`\n  border-top-right-radius: 10px;\n  border-top-left-radius: 10px;\n  box-shadow: 0px 2px 8px rgba(0, 0, 0, 0.2);\n  position: relative;\n`;\n\nconst NoonLine = styled.hr`\n  width: 97%;\n  border-top: 1px dashed red;\n  position: relative;\n  top: -282.5px;\n`;\n\nlet bookingDateTime = [];\nclass Schedule extends React.Component {\n  state = {\n    currentMonth: new Date(),\n    eventsArr: [],\n  };\n\n  // When component did update, call storeEvents()\n  storeEvents = events => {\n    bookingDateTime = []; // many sets of appointment time\n    events.forEach(item => {\n      bookingDateTime.push({\n        start: item.start.dateTime, // e.g. 2019-09-12T09:30:00+10:00\n        end: item.end.dateTime, // e.g. 2019-09-12T10:30:00+10:00\n        //duration: this.processMSTime(item.duration), // PT1H\n      });\n    });\n    if (this.state.eventsArr.length === 0) {\n      this.setState({\n        eventsArr: bookingDateTime,\n      });\n    }\n  };\n\n  processMSTime = time => {\n    let re = /(\\d+[dhms]+)(\\d*[hms]*)(\\d*[ms]*)(\\d*[s]*)/i;\n    let found = time.match(re);\n    let period = {};\n    let eachTimeFormat = [];\n    for (let i = 1; i <= 4; i++) {\n      period = {};\n      if (found[i] !== \"\") {\n        period.num = found[i].slice(0, -1);\n        period.duration = found[i].slice(-1);\n        eachTimeFormat.push(period);\n      }\n    }\n    let intervalSec = 0;\n    let num;\n    for (let i = 0; i < eachTimeFormat.length; i++) {\n      num = parseInt(eachTimeFormat[i].num);\n      switch (eachTimeFormat[i].duration) {\n        case \"S\":\n          intervalSec += num;\n          break;\n        case \"M\":\n          intervalSec += num * 60;\n          break;\n        case \"H\":\n          intervalSec += num * 60 * 60;\n          break;\n        case \"D\":\n          intervalSec += num * 60 * 60 * 24;\n          break;\n        default:\n          console.log(\"no matching duration with\" + eachTimeFormat[i].duration);\n          break;\n      }\n    }\n    return intervalSec;\n  };\n\n  prevWeek = current => {\n    let curPosition = moment(current);\n    let diff = curPosition.diff(moment(new Date()), \"days\");\n    // only can go back to last week and can go to next two weeks\n    if (-7 < diff && diff < 14) {\n      this.setState({\n        currentMonth: moment(current).subtract(1, \"w\"),\n      });\n    }\n  };\n  nextWeek = current => {\n    let curPosition = moment(current);\n    let diff = curPosition.diff(moment(new Date()), \"days\");\n    // only can go back to last week and can go to next two weeks\n    if (-7 <= diff && diff < 13) {\n      this.setState({\n        currentMonth: moment(current).add(1, \"w\"),\n      });\n    }\n  };\n  componentDidUpdate() {\n    // if there are response data (i.e. !==null) and events haven't been processed\n    if (this.props.events !== null && bookingDateTime.length === 0) {\n      this.storeEvents(this.props.events);\n    }\n  }\n  render() {\n    const { currentMonth, eventsArr } = this.state;\n    return (\n      <>\n        <ScheduleWrapper>\n          <ScheduleHeader\n            current={currentMonth}\n            prevWeek={this.prevWeek}\n            nextWeek={this.nextWeek}\n          />\n          <ScheduleWeekdays\n            current={currentMonth}\n            events={eventsArr}\n            getDate={this.props.getSelectedDate}\n          />\n          <NoonLine />\n        </ScheduleWrapper>\n      </>\n    );\n  }\n}\n\nexport default Schedule;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport moment from \"moment\";\nimport { Container, Button, Spinner } from \"reactstrap\";\nimport styled from \"styled-components\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport NavBar from \"./NavBar\";\nimport InfoForm from \"./InfoForm\";\nimport Schedule from \"./Schedule\";\n\nconst SentButton = styled(Button)`\n  margin: 0px auto 10px;\n  display: flex;\n  justify-content: center;\n`;\nconst SpinnerWrapper = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background-color: white;\n  position: relative;\n  top: -71px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\nconst StyledSpinner = styled(Spinner)``;\nconst NoAccessTokenMsg = styled.div`\n  height: 75vh;\n  display: flex;\n  text-align: center;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nclass App2 extends React.Component {\n  state = {\n    business: null,\n    calendarEvents: null,\n    services: null,\n    regisURL: null,\n    selectedDate: null,\n    userInfo: {\n      userName: null,\n      userEmail: null,\n    },\n    isLoad: false,\n  };\n\n  componentDidMount() {\n    this.getURLandBookingsData();\n  }\n\n  getURLandBookingsData = () => {\n    //fetch(\"http://localhost:5500/url\")\n    fetch(\"/url\") // get registering url\n      .then(data => data.text())\n      .then(urlResult => {\n        //fetch(\"http://localhost:5500/book\")\n        fetch(\"/book\") // get bookings data\n          .then(data => data.json())\n          .then(bookingsResults => {\n            this.setState({\n              business: bookingsResults.business,\n              calendarEvents: bookingsResults.events, // appointments will be passed into <Schedule/>\n              services: bookingsResults.services,\n              regisURL: urlResult,\n              isLoad: true,\n            });\n          });\n      });\n  };\n  getSelectedDate = data => {\n    this.setState({\n      selectedDate: data,\n    });\n  };\n  getUserInfo = data => {\n    this.setState({\n      userInfo: data,\n    });\n  };\n  sentData = () => {\n    // send data through bookings api\n    const { selectedDate, userInfo } = this.state;\n    if (selectedDate && userInfo.userName && userInfo.userEmail) {\n      if (userInfo.userEmail !== \"NotRightFormat\") {\n        alert(\n          \"Thank you for using BOOKING WEB APP.\\nPlease wait for 5 sec ...\"\n        );\n        //fetch(\"http://localhost:5500/book\", {\n        fetch(\"/book\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            \"@odata.type\": \"#microsoft.graph.bookingAppointment\",\n            customerEmailAddress: userInfo.userEmail,\n            customerName: userInfo.userName,\n            customerNotes: \"Please be on time.\",\n            customerPhone: \"213-555-0199\",\n            end: {\n              \"@odata.type\": \"#microsoft.graph.dateTimeTimeZone\",\n              dateTime: moment(selectedDate.tempEndTime).format(),\n              timeZone: \"Australia/Brisbane\",\n            },\n            serviceId: \"6fbd2880-9e81-4f0f-9d78-291d0ce9066f\",\n            serviceName: \"Initial consult\",\n            start: {\n              \"@odata.type\": \"#microsoft.graph.dateTimeTimeZone\",\n              dateTime: moment(selectedDate.tempStartTime).format(),\n              timeZone: \"Australia/Brisbane\",\n            },\n          }),\n        }).then(res => {\n          window.location.reload();\n          //return res.text();\n        });\n      } else {\n        alert(\"Format of Email is wrong!\");\n      }\n    } else {\n      if (selectedDate === null) {\n        alert(\"Please choose time~\");\n      } else {\n        alert(\"Please input Name and Email !\");\n      }\n    }\n  };\n\n  render() {\n    const { business, calendarEvents, services, regisURL, isLoad } = this.state;\n    let loadingClasses = \"hidden\",\n      mainClasses = \"\";\n    console.log(business);\n    console.log(calendarEvents);\n    console.log(services);\n    // when data haven't been loaded, hide main views and show loading img\n    if (!isLoad) {\n      mainClasses = \"hidden\";\n      loadingClasses = \"\";\n    }\n    // check if there is data in the database\n    let noAccessTokenRecord =\n      isLoad &&\n      business === null &&\n      calendarEvents === null &&\n      services === null;\n\n    return (\n      <>\n        <SpinnerWrapper className={loadingClasses}>\n          <StyledSpinner color=\"primary\" />\n        </SpinnerWrapper>\n        <div className={mainClasses}>\n          <NavBar url={regisURL} showRegister={noAccessTokenRecord} />\n          <Container>\n            {noAccessTokenRecord ? (\n              <NoAccessTokenMsg>\n                <h1>There is no data in the database</h1>\n                <h1>Administrator have to register at first !</h1>\n              </NoAccessTokenMsg>\n            ) : (\n              <Router>\n                <Route\n                  exact\n                  path=\"/\"\n                  render={() => {\n                    return (\n                      <>\n                        <InfoForm getUserInfo={this.getUserInfo} />\n                        <Schedule\n                          events={this.state.calendarEvents}\n                          getSelectedDate={this.getSelectedDate}\n                        />\n                        <SentButton color=\"primary\" onClick={this.sentData}>\n                          Sent Book\n                        </SentButton>\n                      </>\n                    );\n                  }}\n                />\n              </Router>\n            )}\n          </Container>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App2;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App2 from \"./App2\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App2 />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}