{"version":3,"sources":["NavBar.js","InfoForm.js","ScheduleHeader.js","SlotCell.js","ScheduleWeekdays.js","Schedule.js","App2.js","serviceWorker.js","index.js"],"names":["NavBar","url","this","props","Navbar","color","dark","expand","fixed","Container","NavbarBrand","href","Nav","navbar","NavItem","showRegister","NavLink","target","React","Component","InfoWrapper","styled","div","InfoHeader","h2","InfoContent","InfoLeft","InfoRight","InfoForm","state","userName","userEmail","selectedServiceName","selectedServiceId","serviceNotes","inputName","e","setState","value","getInfo","inputEmail","emailContent","match","selectService","index","selectedIndex","pickedChild","options","id","inputserviceNotes","services","FormGroup","Input","type","name","placeholder","onChange","Label","for","map","item","key","displayName","rows","HeaderOuter","WeekNav","ScheduleHeader","current","startOfWeek","moment","startOf","endOfWeek","endOf","datePeriod","format","onClick","prevWeek","nextWeek","Cell","SlotCell","time","isPicked","isHovered","checkAfterToday","now","Date","dayAfterToday","diff","noWorkDay","days","handleClick","isSelected","handleMouseEnter","handleMouseLeave","isBusy","tempBookTime","classes","tempStartTime","tempEndTime","title","className","onMouseEnter","onMouseLeave","DayWrapper","WeekTitleCell","DateOfWeek","RowCells","SlotWrapper","TimeCell","slotPeriod","ScheduleWeekdays","isFree","duration","getDate","alert","renderCells","day","dateEvents","timeSlots","slotInterval","startHourOfService","startMinuteOfService","endHourOfService","endMinuteOfService","length","re","foundStart","start","foundEnd","end","startHourOfDay","hour","minute","second","millisecond","endHourOfDay","startOfHour","endOfHour","slots","i","afterStart","beforeEnd","push","add","curPosition","events","business","startDay","weekdays","businessHour","businessHours","find","forEach","event","date","ScheduleWrapper","NoonLine","hr","bookingDateTime","Schedule","currentMonth","eventsArr","isCheckEvents","storeEvents","dateTime","processMSTime","found","period","eachTimeFormat","num","slice","intervalSec","parseInt","console","log","subtract","getSelectedDate","SentButton","Button","SpinnerWrapper","StyledSpinner","Spinner","NoAccessTokenMsg","App2","calendarEvents","regisURL","selectedDate","userInfo","isLoad","getURLandBookingsData","fetch","then","data","text","urlResult","json","bookingsResults","sendData","selServiceName","selServiceId","info","method","headers","body","JSON","stringify","customerEmailAddress","customerName","customerNotes","customerPhone","timeZone","serviceId","serviceName","res","window","location","reload","loadingClasses","mainClasses","noAccessTokenRecord","exact","path","render","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.adfea1bb.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Container,\n  Navbar,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n} from \"reactstrap\";\n\nexport default class NavBar extends React.Component {\n  render() {\n    const url = this.props.url;\n    return (\n      <div>\n        {/* expand=\"md\"：橫列版的navbar，navbar的class要再加navbar-expand-xl|lg|md|sm。\n        跟之前提過的RWD一樣，會在這些螢幕寬度以上時做出橫列，小於的話就疊起來 */}\n        <Navbar color=\"dark\" dark expand=\"md\" fixed=\"top\">\n          <Container>\n            <NavbarBrand href=\"/\">BOOKING WEB APP</NavbarBrand>\n            <Nav navbar>\n              <NavItem>\n                {this.props.showRegister ? (\n                  <NavLink href={url} target=\"_blank\">\n                    Register\n                  </NavLink>\n                ) : null}\n              </NavItem>\n            </Nav>\n          </Container>\n        </Navbar>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { FormGroup, Label, Input } from \"reactstrap\";\n\nconst InfoWrapper = styled.div`\n  margin: 10px auto;\n`;\nconst InfoHeader = styled.h2`\n  text-align: center;\n`;\nconst InfoContent = styled.div`\n  display: flex;\n`;\nconst InfoLeft = styled.div`\n  flex-grow: 1;\n  margin: 10px 10px 0px;\n`;\nconst InfoRight = styled.div`\n  flex-grow: 1;\n  margin: 15px 10px 0px;\n`;\nclass InfoForm extends React.Component {\n  state = {\n    userName: null,\n    userEmail: null,\n    selectedServiceName: null,\n    selectedServiceId: null,\n    serviceNotes: \"\",\n  };\n  inputName = e => {\n    this.setState(\n      {\n        userName: e.target.value,\n      },\n      () => {\n        this.props.getInfo(this.state);\n      }\n    );\n  };\n  inputEmail = e => {\n    let re = /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/i;\n    let emailContent = \"\";\n    if (e.target.value) {\n      let isMatch = e.target.value.match(re);\n      if (isMatch !== null) {\n        emailContent = e.target.value;\n      } else {\n        emailContent = \"NotRightFormat\";\n      }\n    }\n    this.setState(\n      {\n        userEmail: emailContent,\n      },\n      () => {\n        this.props.getInfo(this.state);\n      }\n    );\n  };\n  selectService = e => {\n    let index = e.target.selectedIndex;\n    let pickedChild = e.target.options[index];\n    this.setState(\n      {\n        selectedServiceName: e.target.value,\n        selectedServiceId: pickedChild.id,\n      },\n      () => {\n        this.props.getInfo(this.state);\n      }\n    );\n  };\n  inputserviceNotes = e => {\n    this.setState(\n      {\n        serviceNotes: e.target.value,\n      },\n      () => {\n        this.props.getInfo(this.state);\n      }\n    );\n  };\n\n  render() {\n    const { services } = this.props;\n    return (\n      <InfoWrapper>\n        <InfoHeader>Information</InfoHeader>\n        <InfoContent>\n          <InfoLeft>\n            <FormGroup>\n              <Input\n                type=\"text\"\n                name=\"userName\"\n                id=\"userName\"\n                placeholder=\"Name (Required)\"\n                onChange={this.inputName}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Input\n                type=\"email\"\n                name=\"email\"\n                id=\"email\"\n                placeholder=\"Email (Required)\"\n                onChange={this.inputEmail}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"select\">Select Service</Label>\n              <Input\n                type=\"select\"\n                name=\"select\"\n                id=\"select\"\n                onChange={this.selectService}\n              >\n                {services\n                  ? services.map(item => (\n                      <option key={item.id} id={item.id}>\n                        {item.displayName}\n                      </option>\n                    ))\n                  : \"\"}\n              </Input>\n            </FormGroup>\n          </InfoLeft>\n          <InfoRight>\n            <FormGroup>\n              <Label for=\"exampleText\">\n                Please let me know if you have any special requests.\n              </Label>\n              <Input\n                type=\"textarea\"\n                name=\"text\"\n                id=\"exampleText\"\n                rows=\"5\"\n                onChange={this.inputserviceNotes}\n              />\n            </FormGroup>\n          </InfoRight>\n        </InfoContent>\n      </InfoWrapper>\n    );\n  }\n}\n\nexport default InfoForm;\n","import React from \"react\";\nimport moment from \"moment\";\nimport styled from \"styled-components\";\n\nconst HeaderOuter = styled.div`\n  border-top-right-radius: 10px;\n  border-top-left-radius: 10px;\n  background-color: #89c8ff;\n  padding: 5px;\n  display: flex;\n  justify-content: space-between;\n  line-height: 33px;\n`;\nconst WeekNav = styled.div`\n  width: 35px;\n  height: 35px;\n  text-align: center;\n  line-height: 33px;\n  :hover {\n    border-radius: 50%;\n    background-color: #0088ff;\n    color: white;\n  }\n`;\n\nfunction ScheduleHeader(props) {\n  const current = props.current;\n  const headerMonthFormat = \"MMM YYYY\";\n  const startOfWeek = moment(current).startOf(\"week\");\n  const endOfWeek = moment(current).endOf(\"week\");\n  const datePeriod =\n    moment(startOfWeek).format(\"D\") + \"-\" + moment(endOfWeek).format(\"D\");\n  return (\n    <HeaderOuter>\n      <WeekNav onClick={() => props.prevWeek(current)}> {\"<\"} </WeekNav>\n      <div>{datePeriod + \" \" + moment(current).format(headerMonthFormat)}</div>\n      <WeekNav onClick={() => props.nextWeek(current)}> {\">\"} </WeekNav>\n    </HeaderOuter>\n  );\n}\n\nexport default ScheduleHeader;\n","import React from \"react\";\nimport moment from \"moment\";\nimport styled from \"styled-components\";\n\nconst Cell = styled.div`\n  border: 1px dashed rgb(228, 228, 228);\n  width: 100%;\n  height: 12px;\n  text-align: center;\n  line-height: 26px;\n  margin: 1px 0px;\n  transition: all 0.05s ease-in-out;\n`;\nclass SlotCell extends React.Component {\n  state = {\n    time: this.props.time,\n    isPicked: null,\n    isHovered: false,\n  };\n\n  checkAfterToday = () => {\n    const { time } = this.state;\n    // add \"start of day\" to make sure \"now\" starts at 00:00\n    const now = moment(new Date()).startOf(\"day\");\n    const dayAfterToday = time.diff(now, \"days\");\n    const noWorkDay = time.days();\n    if (dayAfterToday > 0 && noWorkDay !== 0 && noWorkDay !== 6) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  handleClick = e => {\n    this.setState({\n      isSelected: true,\n    });\n  };\n\n  handleMouseEnter = e => {\n    e.target.value = this.state.time;\n    this.setState({\n      isHovered: true,\n    });\n  };\n\n  handleMouseLeave = e => {\n    this.setState({\n      isHovered: false,\n    });\n  };\n\n  render() {\n    const { time, isHovered } = this.state;\n    const { isBusy, tempBookTime } = this.props;\n    //let chooseBusyDay = false; // for drag-multi-select\n    let classes = \"\";\n    if (this.checkAfterToday() && isBusy) {\n      classes = \"busy\";\n    } else if (this.checkAfterToday() && isBusy === false) {\n      classes = \"mouse-on\";\n    }\n\n    // if time is between selecting appointment period, change classes to show green\n    if (\n      this.checkAfterToday() &&\n      tempBookTime.tempStartTime <= time &&\n      time < tempBookTime.tempEndTime\n    ) {\n      if (!isBusy) {\n        classes += \" selecting\";\n      } else {\n        //chooseBusyDay = true; // for drag-multi-select\n        //this.props.handleChooseBusyDay(chooseBusyDay); // for drag-multi-select\n      }\n    }\n\n    return (\n      <Cell\n        title={isHovered ? moment(time).format(\"hh:mm A\") : \"\"}\n        className={classes}\n        value={time}\n        // for drag-multi-select\n        /*\n        onMouseDown={e =>\n          this.props.handleMouseDown(e, this.checkAfterToday(), !isBusy)\n        }\n        */\n        // for single-select\n        onClick={e =>\n          this.props.handleClick(e, this.checkAfterToday(), !isBusy)\n        }\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      ></Cell>\n    );\n  }\n}\n\nexport default SlotCell;\n","import React from \"react\";\nimport moment from \"moment\";\nimport styled from \"styled-components\";\nimport SlotCell from \"./SlotCell\";\n\nconst DayWrapper = styled.div`\n  width: 100%;\n  margin: 0px 2.5px;\n`;\nconst WeekTitleCell = styled.div`\n  margin: 5px 10px;\n  width: 14.2%;\n  height: 45px;\n  line-height: 23px;\n`;\nconst DateOfWeek = styled.div`\n  font-size: 20px;\n`;\nconst RowCells = styled.div`\n  padding: 5px 20px;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n`;\nconst SlotWrapper = styled.div``;\nconst TimeCell = styled.div`\n  border: 1px dashed rgb(228, 228, 228);\n  width: 100%;\n  height: 25px;\n  text-align: center;\n  line-height: 24px;\n  margin: 1px 0px;\n`;\n\nconst time = [\n  \"8:00\",\n  \"8:30\",\n  \"9:00\",\n  \"9:30\",\n  \"10:00\",\n  \"10:30\",\n  \"11:00\",\n  \"11:30\",\n  \"12:00\",\n  \"12:30\",\n  \"13:00\",\n  \"13:30\",\n  \"14:00\",\n  \"14:30\",\n  \"15:00\",\n  \"15:30\",\n  \"16:00\",\n  \"16:30\",\n];\n\nconst slotPeriod = 15;\n\nclass ScheduleWeekdays extends React.Component {\n  state = {\n    tempBookTime: {\n      tempStartTime: null,\n      tempEndTime: null,\n    },\n    //mouseIsDown: false, // for drag-multi-select\n  };\n\n  // for single-select\n  handleClick = (e, dayAfterToday, isFree) => {\n    const duration = slotPeriod * 60 * 1000;\n    if (dayAfterToday && isFree) {\n      this.setState(\n        {\n          tempBookTime: {\n            tempStartTime: e.target.value,\n            tempEndTime: moment(e.target.value + duration),\n          },\n        },\n        () => {\n          this.props.getDate(this.state.tempBookTime); // send selected time back to App2.js\n        }\n      );\n    } else {\n      alert(\"Please choose another day.\");\n    }\n  };\n  // for drag-multi-select\n  /*\n  handleMouseDown = (e, dayAfterToday, isFree) => {\n    const duration = slotPeriod * 60 * 1000;\n    if (dayAfterToday && isFree) {\n      this.setState(\n        {\n          tempBookTime: {\n            tempStartTime: e.target.value,\n            tempEndTime: moment(e.target.value + duration),\n          },\n          mouseIsDown: true,\n        },\n        () => {\n          this.props.getDate(this.state.tempBookTime); // send selected time back to App2.js\n        }\n      );\n    } else {\n      alert(\"Please choose another day.\");\n    }\n  };\n  */\n\n  // for drag-multi-select\n  /*\n  handleMouseOver = e => {\n    // when mouse is down, this method can start to work\n    let { tempBookTime } = this.state;\n    const duration = slotPeriod * 60 * 1000;\n    this.setState(\n      {\n        tempBookTime: {\n          tempStartTime: tempBookTime.tempStartTime,\n          tempEndTime: moment(e.target.value + duration),\n        },\n      },\n      () => {\n        this.props.getDate(this.state.tempBookTime); // send selected time back to App2.js\n      }\n    );\n  };\n  */\n\n  // for drag-multi-select\n  /*\n  handleMouseUp = () => {\n    this.setState({\n      mouseIsDown: false,\n    });\n  };\n  */\n\n  // for drag-multi-select\n  /*\n  handleChooseBusyDay = busyDay => {\n    let { tempBookTime } = this.state;\n    const duration = slotPeriod * 60 * 1000;\n    if (busyDay) {\n      this.setState(\n        {\n          tempBookTime: {\n            tempStartTime: tempBookTime.tempStartTime,\n            tempEndTime: moment(tempBookTime.tempStartTime + duration),\n          },\n          mouseIsDown: false,\n        },\n        () => {\n          this.props.getDate(this.state.tempBookTime); // send selected time back to App2.js\n        }\n      );\n    }\n  };\n  */\n\n  renderCells = (day, dateEvents, timeSlots) => {\n    const slotInterval = slotPeriod;\n    let startHourOfService = 8,\n      startMinuteOfService = 0;\n    let endHourOfService = 17,\n      endMinuteOfService = 0;\n    // Retrieve business hour which is controlled by admin\n    if (timeSlots && timeSlots.length !== 0) {\n      let re = /\\d+/g;\n      let foundStart = timeSlots[0].start.match(re);\n      let foundEnd = timeSlots[0].end.match(re);\n      startHourOfService = foundStart[0];\n      startMinuteOfService = foundStart[1];\n      endHourOfService = foundEnd[0];\n      endMinuteOfService = foundEnd[1];\n    }\n    const startHourOfDay = moment(day) // start time of a day\n      .hour(8)\n      .minute(0)\n      .second(0)\n      .millisecond(0);\n    const endHourOfDay = moment(day) // end time of a day\n      .hour(17)\n      .minute(0)\n      .second(0)\n      .millisecond(0);\n    const startOfHour = moment(day) // start time of business service\n      .hour(startHourOfService)\n      .minute(startMinuteOfService)\n      .second(0)\n      .millisecond(0);\n    const endOfHour = moment(day) // end time of business service\n      .hour(endHourOfService)\n      .minute(endMinuteOfService)\n      .second(0)\n      .millisecond(0);\n    //console.log(endOfHour.days(String));\n\n    let slots = [];\n    let hour = startHourOfDay;\n    let i = 0;\n    let isBusy;\n    while (hour < endHourOfDay) {\n      isBusy = false;\n      // if the start of business hour is after 8:00 (e.g. 9:00) and\n      // the end of business hour is before 17:00 (e.g. 16:00)\n      // no-business-hour (e.g. 8-9, 16-17) will be flagged to be busy\n      if (\n        hour.diff(startOfHour, \"minutes\") < 0 ||\n        hour.diff(endOfHour, \"minutes\") >= 0\n      ) {\n        isBusy = true;\n      }\n      // if there is appointments which haven't been shown on schedule\n      if (i < dateEvents.length) {\n        let afterStart = dateEvents[i].start.diff(hour, \"minutes\") <= 0;\n        let beforeEnd = dateEvents[i].end.diff(hour, \"minutes\") > 0;\n        // if time is between busy appointment period, flag it is busy\n        if (afterStart && beforeEnd) {\n          isBusy = true; // isBusy will be passed into <SlotCell>\n        }\n        // if time is equal to end of appointment, jump to next appointment\n        if (dateEvents[i].end.diff(hour, \"minutes\") === 0) {\n          i++;\n          continue;\n        }\n      }\n\n      slots.push(\n        <SlotCell\n          key={hour}\n          time={hour}\n          isBusy={isBusy}\n          // tempBookTime is passed into for processing selecting css (green)\n          tempBookTime={this.state.tempBookTime}\n          handleClick={this.handleClick} // for single-select\n          //handleMouseDown={this.handleMouseDown} // for drag-multi-select\n          //handleChooseBusyDay={this.handleChooseBusyDay} // for drag-multi-select\n        ></SlotCell>\n      );\n      hour = moment(hour).add(slotInterval, \"m\");\n    }\n    return <SlotWrapper>{slots}</SlotWrapper>;\n  };\n\n  render() {\n    const { current, events, business } = this.props;\n    //const { mouseIsDown } = this.state; // for drag-multi-select\n    const weekdaysFormat = \"ddd\";\n    const weekdatesFormat = \"D\";\n    const startDay = moment(current).day(0); // The start day of this week(e.g. Sun 15)\n    let weekdays = [];\n    let day, classes, curPosition, diff;\n    // A week is 7 days, produce each column and slots from Sun, Mon to Sat\n    for (let i = 0; i < 7; i++) {\n      // add day by day to the start day of this week(Sun > Mon > ... > Sat)\n      day = moment(startDay).add(i, \"d\");\n      //let businessDay1;\n      let businessHour;\n      // If there is no open work slot which are set by admin, the day will not be shown\n      if (business) {\n        //businessDay1 = moment(startDay).days(business[\"businessHours\"][i].day);\n        //businessHour = business.businessHours[i].timeSlots;\n\n        //from open business day array find the same day with my day-variable\n        let dayEqualToBusinessDay = business.businessHours.find(item => {\n          let businessDay = moment(startDay).days(item.day);\n          return businessDay.days() === day.days();\n        });\n        businessHour = dayEqualToBusinessDay.timeSlots;\n\n        //if (businessDay1.days() === day.days() && businessHour.length === 0) {\n        if (businessHour.length === 0) {\n          continue;\n        }\n      }\n\n      // set days before today to gray color, and today to peach color\n      classes = \"\";\n      curPosition = moment(day);\n      diff = curPosition.diff(new Date(), \"hours\");\n      if (diff < 0) {\n        classes = \"before\";\n      } else if (diff === 0) {\n        classes = \"today\";\n      }\n      //if (curPosition.days() === 0 || curPosition.days() === 6) {\n      if (businessHour) {\n        if (businessHour.length === 0) {\n          classes += \" no-work-day\";\n        }\n      }\n\n      // check if there is appointments at curPosition \"that\" day.\n      let dateEvents = [];\n      events.forEach(event => {\n        if (curPosition.date() === moment(event.start).date()) {\n          dateEvents.push({\n            start: moment(event.start),\n            end: moment(event.end),\n          });\n        }\n      });\n      // if there is, pass appointments of that day into renderCells() as below\n      weekdays.push(\n        <DayWrapper\n          key={i}\n          className={classes}\n          //onMouseOver={mouseIsDown ? this.handleMouseOver : null} // for drag-multi-select\n          //onMouseUp={this.handleMouseUp} // for drag-multi-select\n        >\n          <WeekTitleCell>\n            <div>{moment(day).format(weekdaysFormat)}</div>\n            <DateOfWeek>{moment(day).format(weekdatesFormat)}</DateOfWeek>\n          </WeekTitleCell>\n          {this.renderCells(day, dateEvents, businessHour)}\n        </DayWrapper>\n      );\n    }\n    return (\n      <RowCells>\n        <DayWrapper>\n          <WeekTitleCell></WeekTitleCell>\n          <SlotWrapper>\n            {time.map(item => (\n              <TimeCell key={item}>{item}</TimeCell>\n            ))}\n          </SlotWrapper>\n        </DayWrapper>\n        {weekdays}\n      </RowCells>\n    );\n  }\n}\n\nexport default ScheduleWeekdays;\n","import React from \"react\";\nimport moment from \"moment\";\nimport styled from \"styled-components\";\nimport ScheduleHeader from \"./ScheduleHeader\";\nimport ScheduleWeekdays from \"./ScheduleWeekdays\";\n\nconst ScheduleWrapper = styled.div`\n  border-top-right-radius: 10px;\n  border-top-left-radius: 10px;\n  box-shadow: 0px 2px 8px rgba(0, 0, 0, 0.2);\n  position: relative;\n`;\n\nconst NoonLine = styled.hr`\n  width: 97%;\n  border-top: 1px dashed red;\n  position: relative;\n  top: -282.5px;\n`;\n\nlet bookingDateTime = [];\nclass Schedule extends React.Component {\n  state = {\n    currentMonth: new Date(),\n    eventsArr: [],\n    isCheckEvents: false,\n  };\n\n  // When component did update, call storeEvents()\n  storeEvents = events => {\n    bookingDateTime = []; // many sets of appointment time\n    events.forEach(item => {\n      bookingDateTime.push({\n        start: item.start.dateTime, // e.g. 2019-09-12T09:30:00+10:00\n        end: item.end.dateTime, // e.g. 2019-09-12T10:30:00+10:00\n        //duration: this.processMSTime(item.duration), // PT1H\n      });\n    });\n    if (this.state.eventsArr.length === 0 && !this.state.isCheckEvents) {\n      this.setState({\n        eventsArr: bookingDateTime,\n        isCheckEvents: true,\n      });\n    }\n  };\n\n  processMSTime = time => {\n    let re = /(\\d+[dhms]+)(\\d*[hms]*)(\\d*[ms]*)(\\d*[s]*)/i;\n    let found = time.match(re);\n    let period = {};\n    let eachTimeFormat = [];\n    for (let i = 1; i <= 4; i++) {\n      period = {};\n      if (found[i] !== \"\") {\n        period.num = found[i].slice(0, -1);\n        period.duration = found[i].slice(-1);\n        eachTimeFormat.push(period);\n      }\n    }\n    let intervalSec = 0;\n    let num;\n    for (let i = 0; i < eachTimeFormat.length; i++) {\n      num = parseInt(eachTimeFormat[i].num);\n      switch (eachTimeFormat[i].duration) {\n        case \"S\":\n          intervalSec += num;\n          break;\n        case \"M\":\n          intervalSec += num * 60;\n          break;\n        case \"H\":\n          intervalSec += num * 60 * 60;\n          break;\n        case \"D\":\n          intervalSec += num * 60 * 60 * 24;\n          break;\n        default:\n          console.log(\"no matching duration with\" + eachTimeFormat[i].duration);\n          break;\n      }\n    }\n    return intervalSec;\n  };\n\n  prevWeek = current => {\n    // need startOf, otherwise, the miliseconds will different\n    // and \"diff\" will equal to 6 instaed of 7\n    let now = moment(new Date()).startOf(\"day\");\n    let curPosition = moment(current).startOf(\"day\");\n    let diff = curPosition.diff(now, \"days\");\n    // only can go back to last week and can go to next two weeks\n    if (0 < diff && diff <= 7) {\n      this.setState({\n        currentMonth: moment(current).subtract(1, \"w\"),\n      });\n    }\n  };\n  nextWeek = current => {\n    // need startOf, otherwise, the miliseconds will different\n    // and \"diff\" will equal to 6 instaed of 7\n    let now = moment(new Date()).startOf(\"day\");\n    let curPosition = moment(current).startOf(\"day\");\n    let diff = curPosition.diff(now, \"days\");\n    // only can go back to last week and can go to next two weeks\n    if (0 <= diff && diff < 7) {\n      this.setState({\n        currentMonth: moment(current).add(1, \"w\"),\n      });\n    }\n  };\n  componentDidUpdate() {\n    // if there are response data (i.e. !==null) and events haven't been processed\n    if (this.props.events !== null && bookingDateTime.length === 0) {\n      this.storeEvents(this.props.events);\n    }\n  }\n  render() {\n    const { currentMonth, eventsArr } = this.state;\n    return (\n      <>\n        <ScheduleWrapper>\n          <ScheduleHeader\n            current={currentMonth}\n            prevWeek={this.prevWeek}\n            nextWeek={this.nextWeek}\n          />\n          <ScheduleWeekdays\n            current={currentMonth}\n            business={this.props.business}\n            events={eventsArr}\n            getDate={this.props.getSelectedDate}\n          />\n          <NoonLine />\n        </ScheduleWrapper>\n      </>\n    );\n  }\n}\n\nexport default Schedule;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport moment from \"moment\";\nimport { Container, Button, Spinner } from \"reactstrap\";\nimport styled from \"styled-components\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport NavBar from \"./NavBar\";\nimport InfoForm from \"./InfoForm\";\nimport Schedule from \"./Schedule\";\n\nconst SentButton = styled(Button)`\n  margin: 0px auto 10px;\n  display: flex;\n  justify-content: center;\n`;\nconst SpinnerWrapper = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background-color: white;\n  position: relative;\n  top: -71px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\nconst StyledSpinner = styled(Spinner)``;\nconst NoAccessTokenMsg = styled.div`\n  height: 75vh;\n  display: flex;\n  text-align: center;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nclass App2 extends React.Component {\n  state = {\n    business: null,\n    calendarEvents: null,\n    services: null,\n    regisURL: null,\n    selectedDate: null,\n    userInfo: {\n      userName: null,\n      userEmail: null,\n      selectedServiceName: null,\n      selectedServiceId: null,\n      serviceNotes: \"\",\n    },\n    isLoad: false,\n  };\n\n  componentDidMount() {\n    this.getURLandBookingsData();\n  }\n\n  getURLandBookingsData = () => {\n    //fetch(\"http://localhost:5500/url\")\n    fetch(\"/url\") // get registering url\n      .then(data => data.text())\n      .then(urlResult => {\n        //fetch(\"http://localhost:5500/book\")\n        fetch(\"/book\") // get bookings data\n          .then(data => data.json())\n          .then(bookingsResults => {\n            this.setState({\n              business: bookingsResults.business, // businessHours will be passed into <Schedule/>\n              calendarEvents: bookingsResults.events, // appointments will be passed into <Schedule/>\n              services: bookingsResults.services, // services will be passed into <InfoForm/>\n              regisURL: urlResult,\n              isLoad: true,\n            });\n          });\n      });\n  };\n\n  getSelectedDate = data => {\n    this.setState({\n      selectedDate: data,\n    });\n  };\n  getInfo = data => {\n    this.setState({\n      userInfo: data,\n    });\n  };\n\n  sendData = () => {\n    // send data through bookings api\n    const { services, selectedDate, userInfo } = this.state;\n    let selServiceName = null,\n      selServiceId = null;\n    // if user doesn't change service option, assign default values to selServiceName and selServiceId\n    if (userInfo.selectedServiceName) {\n      selServiceName = userInfo.selectedServiceName;\n      selServiceId = userInfo.selectedServiceId;\n    } else if (services) {\n      selServiceName = services[0].displayName;\n      selServiceId = services[0].id;\n    }\n\n    let info = userInfo.userName && userInfo.userEmail;\n    if (selectedDate && info) {\n      if (userInfo.userEmail !== \"NotRightFormat\") {\n        alert(\n          \"Thank you for using BOOKING WEB APP.\\nPlease wait for 5 sec ...\"\n        );\n        //fetch(\"http://localhost:5500/book\", {\n        fetch(\"/book\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            \"@odata.type\": \"#microsoft.graph.bookingAppointment\",\n            customerEmailAddress: userInfo.userEmail,\n            customerName: userInfo.userName,\n            customerNotes: \"Please be on time.\",\n            customerPhone: \"213-555-0199\",\n            end: {\n              \"@odata.type\": \"#microsoft.graph.dateTimeTimeZone\",\n              dateTime: moment(selectedDate.tempEndTime).format(),\n              timeZone: \"Australia/Brisbane\",\n            },\n            serviceId: selServiceId,\n            serviceName: selServiceName,\n            serviceNotes: userInfo.serviceNotes,\n            start: {\n              \"@odata.type\": \"#microsoft.graph.dateTimeTimeZone\",\n              dateTime: moment(selectedDate.tempStartTime).format(),\n              timeZone: \"Australia/Brisbane\",\n            },\n          }),\n        }).then(res => {\n          window.location.reload();\n          //return res.text();\n        });\n      } else {\n        alert(\"Format of Email is wrong!\");\n      }\n    } else {\n      if (selectedDate === null) {\n        alert(\"Please choose time~\");\n      } else {\n        alert(\"Please input Name and Email!\");\n      }\n    }\n  };\n\n  render() {\n    const { business, calendarEvents, services, regisURL, isLoad } = this.state;\n    let loadingClasses = \"hidden\",\n      mainClasses = \"\";\n    console.log(business);\n    console.log(calendarEvents);\n    console.log(services);\n    //console.log(services[\"value\"]);\n    // when data haven't been loaded, hide main views and show loading img\n    if (!isLoad) {\n      mainClasses = \"hidden\";\n      loadingClasses = \"\";\n    }\n    // check if there is data in the database\n    let noAccessTokenRecord =\n      isLoad &&\n      business === null &&\n      calendarEvents === null &&\n      services === null;\n\n    return (\n      <>\n        <SpinnerWrapper className={loadingClasses}>\n          <StyledSpinner color=\"primary\" />\n        </SpinnerWrapper>\n        <div className={mainClasses}>\n          <NavBar url={regisURL} showRegister={noAccessTokenRecord} />\n          <Container>\n            {noAccessTokenRecord ? (\n              <NoAccessTokenMsg>\n                <h1>There is no data in the database</h1>\n                <h1>Administrator have to register at first !</h1>\n              </NoAccessTokenMsg>\n            ) : (\n              <Router>\n                <Route\n                  exact\n                  path=\"/\"\n                  render={() => {\n                    return (\n                      <>\n                        <InfoForm services={services} getInfo={this.getInfo} />\n                        <Schedule\n                          business={this.state.business}\n                          events={this.state.calendarEvents}\n                          getSelectedDate={this.getSelectedDate}\n                        />\n                        <SentButton color=\"primary\" onClick={this.sendData}>\n                          Sent Book\n                        </SentButton>\n                      </>\n                    );\n                  }}\n                />\n              </Router>\n            )}\n          </Container>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App2;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App2 from \"./App2\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App2 />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}